# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tinkoff/invest/grpc/common.proto, tinkoff/invest/grpc/instruments.proto, tinkoff/invest/grpc/marketdata.proto, tinkoff/invest/grpc/operations.proto, tinkoff/invest/grpc/orders.proto, tinkoff/invest/grpc/users.proto, tinkoff/invest/grpc/sandbox.proto, tinkoff/invest/grpc/stoporders.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, List, Optional

import betterproto
import grpclib


class InstrumentType(betterproto.Enum):
    """Тип инструмента."""

    INSTRUMENT_TYPE_UNSPECIFIED = 0
    INSTRUMENT_TYPE_BOND = 1
    INSTRUMENT_TYPE_SHARE = 2
    INSTRUMENT_TYPE_CURRENCY = 3
    INSTRUMENT_TYPE_ETF = 4
    INSTRUMENT_TYPE_FUTURES = 5
    INSTRUMENT_TYPE_SP = 6
    INSTRUMENT_TYPE_OPTION = 7
    INSTRUMENT_TYPE_CLEARING_CERTIFICATE = 8
    INSTRUMENT_TYPE_INDEX = 9
    INSTRUMENT_TYPE_COMMODITY = 10


class SecurityTradingStatus(betterproto.Enum):
    """Режим торгов инструмента"""

    SECURITY_TRADING_STATUS_UNSPECIFIED = 0
    SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING = 1
    SECURITY_TRADING_STATUS_OPENING_PERIOD = 2
    SECURITY_TRADING_STATUS_CLOSING_PERIOD = 3
    SECURITY_TRADING_STATUS_BREAK_IN_TRADING = 4
    SECURITY_TRADING_STATUS_NORMAL_TRADING = 5
    SECURITY_TRADING_STATUS_CLOSING_AUCTION = 6
    SECURITY_TRADING_STATUS_DARK_POOL_AUCTION = 7
    SECURITY_TRADING_STATUS_DISCRETE_AUCTION = 8
    SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD = 9
    SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE = 10
    SECURITY_TRADING_STATUS_SESSION_ASSIGNED = 11
    SECURITY_TRADING_STATUS_SESSION_CLOSE = 12
    SECURITY_TRADING_STATUS_SESSION_OPEN = 13
    SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING = 14
    SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING = 15
    SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING = 16


class PriceType(betterproto.Enum):
    """Тип цены."""

    PRICE_TYPE_UNSPECIFIED = 0
    PRICE_TYPE_POINT = 1
    PRICE_TYPE_CURRENCY = 2


class ResultSubscriptionStatus(betterproto.Enum):
    RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED = 0
    RESULT_SUBSCRIPTION_STATUS_OK = 1
    RESULT_SUBSCRIPTION_STATUS_ERROR = 13


class CouponType(betterproto.Enum):
    """Тип купонов."""

    COUPON_TYPE_UNSPECIFIED = 0
    COUPON_TYPE_CONSTANT = 1
    COUPON_TYPE_FLOATING = 2
    COUPON_TYPE_DISCOUNT = 3
    COUPON_TYPE_MORTGAGE = 4
    COUPON_TYPE_FIX = 5
    COUPON_TYPE_VARIABLE = 6
    COUPON_TYPE_OTHER = 7


class OptionDirection(betterproto.Enum):
    """Тип опциона по направлению сделки."""

    OPTION_DIRECTION_UNSPECIFIED = 0
    OPTION_DIRECTION_PUT = 1
    OPTION_DIRECTION_CALL = 2


class OptionPaymentType(betterproto.Enum):
    """Тип расчётов по опциону."""

    OPTION_PAYMENT_TYPE_UNSPECIFIED = 0
    OPTION_PAYMENT_TYPE_PREMIUM = 1
    OPTION_PAYMENT_TYPE_MARGINAL = 2


class OptionStyle(betterproto.Enum):
    """Тип опциона по стилю."""

    OPTION_STYLE_UNSPECIFIED = 0
    OPTION_STYLE_AMERICAN = 1
    OPTION_STYLE_EUROPEAN = 2


class OptionSettlementType(betterproto.Enum):
    """Тип опциона по способу исполнения."""

    OPTION_EXECUTION_TYPE_UNSPECIFIED = 0
    OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY = 1
    OPTION_EXECUTION_TYPE_CASH_SETTLEMENT = 2


class InstrumentIdType(betterproto.Enum):
    """
    Тип идентификатора инструмента. [Подробнее об идентификации инструментов](h
    ttps://russianinvestments.github.io/investAPI/faq_identification/).
    """

    INSTRUMENT_ID_UNSPECIFIED = 0
    INSTRUMENT_ID_TYPE_FIGI = 1
    INSTRUMENT_ID_TYPE_TICKER = 2
    INSTRUMENT_ID_TYPE_UID = 3
    INSTRUMENT_ID_TYPE_POSITION_UID = 4


class InstrumentStatus(betterproto.Enum):
    """Статус запрашиваемых инструментов."""

    INSTRUMENT_STATUS_UNSPECIFIED = 0
    INSTRUMENT_STATUS_BASE = 1
    INSTRUMENT_STATUS_ALL = 2


class ShareType(betterproto.Enum):
    """Тип акций."""

    SHARE_TYPE_UNSPECIFIED = 0
    SHARE_TYPE_COMMON = 1
    SHARE_TYPE_PREFERRED = 2
    SHARE_TYPE_ADR = 3
    SHARE_TYPE_GDR = 4
    SHARE_TYPE_MLP = 5
    SHARE_TYPE_NY_REG_SHRS = 6
    SHARE_TYPE_CLOSED_END_FUND = 7
    SHARE_TYPE_REIT = 8


class AssetType(betterproto.Enum):
    """Тип актива."""

    ASSET_TYPE_UNSPECIFIED = 0
    ASSET_TYPE_CURRENCY = 1
    ASSET_TYPE_COMMODITY = 2
    ASSET_TYPE_INDEX = 3
    ASSET_TYPE_SECURITY = 4


class StructuredProductType(betterproto.Enum):
    """Тип структурной ноты."""

    SP_TYPE_UNSPECIFIED = 0
    SP_TYPE_DELIVERABLE = 1
    SP_TYPE_NON_DELIVERABLE = 2


class EditFavoritesActionType(betterproto.Enum):
    """Тип действия со списком избранных инструментов."""

    EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED = 0
    EDIT_FAVORITES_ACTION_TYPE_ADD = 1
    EDIT_FAVORITES_ACTION_TYPE_DEL = 2


class RealExchange(betterproto.Enum):
    """Реальная площадка исполнения расчётов."""

    REAL_EXCHANGE_UNSPECIFIED = 0
    REAL_EXCHANGE_MOEX = 1
    REAL_EXCHANGE_RTS = 2
    REAL_EXCHANGE_OTC = 3
    REAL_EXCHANGE_DEALER = 4


class Recommendation(betterproto.Enum):
    RECOMMENDATION_UNSPECIFIED = 0
    RECOMMENDATION_BUY = 1
    RECOMMENDATION_HOLD = 2
    RECOMMENDATION_SELL = 3


class RiskLevel(betterproto.Enum):
    """Уровень риска облигации."""

    RISK_LEVEL_UNSPECIFIED = 0
    RISK_LEVEL_LOW = 1
    RISK_LEVEL_MODERATE = 2
    RISK_LEVEL_HIGH = 3


class BondType(betterproto.Enum):
    BOND_TYPE_UNSPECIFIED = 0
    BOND_TYPE_REPLACED = 1


class InstrumentExchangeType(betterproto.Enum):
    """Площадка торговли."""

    INSTRUMENT_EXCHANGE_UNSPECIFIED = 0
    INSTRUMENT_EXCHANGE_DEALER = 1


class GetBondEventsRequestEventType(betterproto.Enum):
    EVENT_TYPE_UNSPECIFIED = 0
    EVENT_TYPE_CPN = 1
    EVENT_TYPE_CALL = 2
    EVENT_TYPE_MTY = 3
    EVENT_TYPE_CONV = 4


class GetAssetReportsResponseAssetReportPeriodType(betterproto.Enum):
    PERIOD_TYPE_UNSPECIFIED = 0
    PERIOD_TYPE_QUARTER = 1
    PERIOD_TYPE_SEMIANNUAL = 2
    PERIOD_TYPE_ANNUAL = 3


class SubscriptionAction(betterproto.Enum):
    """Тип операции со списком подписок."""

    SUBSCRIPTION_ACTION_UNSPECIFIED = 0
    SUBSCRIPTION_ACTION_SUBSCRIBE = 1
    SUBSCRIPTION_ACTION_UNSUBSCRIBE = 2


class SubscriptionInterval(betterproto.Enum):
    """Интервал свечи."""

    SUBSCRIPTION_INTERVAL_UNSPECIFIED = 0
    SUBSCRIPTION_INTERVAL_ONE_MINUTE = 1
    SUBSCRIPTION_INTERVAL_FIVE_MINUTES = 2
    SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES = 3
    SUBSCRIPTION_INTERVAL_ONE_HOUR = 4
    SUBSCRIPTION_INTERVAL_ONE_DAY = 5
    SUBSCRIPTION_INTERVAL_2_MIN = 6
    SUBSCRIPTION_INTERVAL_3_MIN = 7
    SUBSCRIPTION_INTERVAL_10_MIN = 8
    SUBSCRIPTION_INTERVAL_30_MIN = 9
    SUBSCRIPTION_INTERVAL_2_HOUR = 10
    SUBSCRIPTION_INTERVAL_4_HOUR = 11
    SUBSCRIPTION_INTERVAL_WEEK = 12
    SUBSCRIPTION_INTERVAL_MONTH = 13


class SubscriptionStatus(betterproto.Enum):
    """Результат подписки."""

    SUBSCRIPTION_STATUS_UNSPECIFIED = 0
    SUBSCRIPTION_STATUS_SUCCESS = 1
    SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND = 2
    SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID = 3
    SUBSCRIPTION_STATUS_DEPTH_IS_INVALID = 4
    SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID = 5
    SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED = 6
    SUBSCRIPTION_STATUS_INTERNAL_ERROR = 7
    SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS = 8
    SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND = 9


class TradeSourceType(betterproto.Enum):
    """Источники сделок"""

    TRADE_SOURCE_UNSPECIFIED = 0
    TRADE_SOURCE_EXCHANGE = 1
    TRADE_SOURCE_DEALER = 2
    TRADE_SOURCE_ALL = 3


class TradeDirection(betterproto.Enum):
    """Направление сделки."""

    TRADE_DIRECTION_UNSPECIFIED = 0
    TRADE_DIRECTION_BUY = 1
    TRADE_DIRECTION_SELL = 2


class CandleInterval(betterproto.Enum):
    """Интервал свечей."""

    CANDLE_INTERVAL_UNSPECIFIED = 0
    CANDLE_INTERVAL_1_MIN = 1
    CANDLE_INTERVAL_5_MIN = 2
    CANDLE_INTERVAL_15_MIN = 3
    CANDLE_INTERVAL_HOUR = 4
    CANDLE_INTERVAL_DAY = 5
    CANDLE_INTERVAL_2_MIN = 6
    CANDLE_INTERVAL_3_MIN = 7
    CANDLE_INTERVAL_10_MIN = 8
    CANDLE_INTERVAL_30_MIN = 9
    CANDLE_INTERVAL_2_HOUR = 10
    CANDLE_INTERVAL_4_HOUR = 11
    CANDLE_INTERVAL_WEEK = 12
    CANDLE_INTERVAL_MONTH = 13


class CandleSource(betterproto.Enum):
    CANDLE_SOURCE_UNSPECIFIED = 0
    CANDLE_SOURCE_EXCHANGE = 1
    CANDLE_SOURCE_DEALER_WEEKEND = 2


class OrderBookType(betterproto.Enum):
    ORDERBOOK_TYPE_UNSPECIFIED = 0
    ORDERBOOK_TYPE_EXCHANGE = 1
    ORDERBOOK_TYPE_DEALER = 2


class GetCandlesRequestCandleSource(betterproto.Enum):
    CANDLE_SOURCE_UNSPECIFIED = 0
    CANDLE_SOURCE_EXCHANGE = 1
    CANDLE_SOURCE_INCLUDE_WEEKEND = 3


class GetTechAnalysisRequestIndicatorInterval(betterproto.Enum):
    INDICATOR_INTERVAL_UNSPECIFIED = 0
    INDICATOR_INTERVAL_ONE_MINUTE = 1
    INDICATOR_INTERVAL_FIVE_MINUTES = 2
    INDICATOR_INTERVAL_FIFTEEN_MINUTES = 3
    INDICATOR_INTERVAL_ONE_HOUR = 4
    INDICATOR_INTERVAL_ONE_DAY = 5
    INDICATOR_INTERVAL_2_MIN = 6
    INDICATOR_INTERVAL_3_MIN = 7
    INDICATOR_INTERVAL_10_MIN = 8
    INDICATOR_INTERVAL_30_MIN = 9
    INDICATOR_INTERVAL_2_HOUR = 10
    INDICATOR_INTERVAL_4_HOUR = 11
    INDICATOR_INTERVAL_WEEK = 12
    INDICATOR_INTERVAL_MONTH = 13


class GetTechAnalysisRequestTypeOfPrice(betterproto.Enum):
    TYPE_OF_PRICE_UNSPECIFIED = 0
    TYPE_OF_PRICE_CLOSE = 1
    TYPE_OF_PRICE_OPEN = 2
    TYPE_OF_PRICE_HIGH = 3
    TYPE_OF_PRICE_LOW = 4
    TYPE_OF_PRICE_AVG = 5


class GetTechAnalysisRequestIndicatorType(betterproto.Enum):
    INDICATOR_TYPE_UNSPECIFIED = 0
    INDICATOR_TYPE_BB = 1
    INDICATOR_TYPE_EMA = 2
    INDICATOR_TYPE_RSI = 3
    INDICATOR_TYPE_MACD = 4
    INDICATOR_TYPE_SMA = 5


class OperationState(betterproto.Enum):
    """Статус запрашиваемых операций."""

    OPERATION_STATE_UNSPECIFIED = 0
    OPERATION_STATE_EXECUTED = 1
    OPERATION_STATE_CANCELED = 2
    OPERATION_STATE_PROGRESS = 3


class OperationType(betterproto.Enum):
    """Тип операции."""

    OPERATION_TYPE_UNSPECIFIED = 0
    OPERATION_TYPE_INPUT = 1
    OPERATION_TYPE_BOND_TAX = 2
    OPERATION_TYPE_OUTPUT_SECURITIES = 3
    OPERATION_TYPE_OVERNIGHT = 4
    OPERATION_TYPE_TAX = 5
    OPERATION_TYPE_BOND_REPAYMENT_FULL = 6
    OPERATION_TYPE_SELL_CARD = 7
    OPERATION_TYPE_DIVIDEND_TAX = 8
    OPERATION_TYPE_OUTPUT = 9
    OPERATION_TYPE_BOND_REPAYMENT = 10
    OPERATION_TYPE_TAX_CORRECTION = 11
    OPERATION_TYPE_SERVICE_FEE = 12
    OPERATION_TYPE_BENEFIT_TAX = 13
    OPERATION_TYPE_MARGIN_FEE = 14
    OPERATION_TYPE_BUY = 15
    OPERATION_TYPE_BUY_CARD = 16
    OPERATION_TYPE_INPUT_SECURITIES = 17
    OPERATION_TYPE_SELL_MARGIN = 18
    OPERATION_TYPE_BROKER_FEE = 19
    OPERATION_TYPE_BUY_MARGIN = 20
    OPERATION_TYPE_DIVIDEND = 21
    OPERATION_TYPE_SELL = 22
    OPERATION_TYPE_COUPON = 23
    OPERATION_TYPE_SUCCESS_FEE = 24
    OPERATION_TYPE_DIVIDEND_TRANSFER = 25
    OPERATION_TYPE_ACCRUING_VARMARGIN = 26
    OPERATION_TYPE_WRITING_OFF_VARMARGIN = 27
    OPERATION_TYPE_DELIVERY_BUY = 28
    OPERATION_TYPE_DELIVERY_SELL = 29
    OPERATION_TYPE_TRACK_MFEE = 30
    OPERATION_TYPE_TRACK_PFEE = 31
    OPERATION_TYPE_TAX_PROGRESSIVE = 32
    OPERATION_TYPE_BOND_TAX_PROGRESSIVE = 33
    OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE = 34
    OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE = 35
    OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE = 36
    OPERATION_TYPE_TAX_REPO_PROGRESSIVE = 37
    OPERATION_TYPE_TAX_REPO = 38
    OPERATION_TYPE_TAX_REPO_HOLD = 39
    OPERATION_TYPE_TAX_REPO_REFUND = 40
    OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE = 41
    OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE = 42
    OPERATION_TYPE_DIV_EXT = 43
    OPERATION_TYPE_TAX_CORRECTION_COUPON = 44
    OPERATION_TYPE_CASH_FEE = 45
    OPERATION_TYPE_OUT_FEE = 46
    OPERATION_TYPE_OUT_STAMP_DUTY = 47
    OPERATION_TYPE_OUTPUT_SWIFT = 50
    OPERATION_TYPE_INPUT_SWIFT = 51
    OPERATION_TYPE_OUTPUT_ACQUIRING = 53
    OPERATION_TYPE_INPUT_ACQUIRING = 54
    OPERATION_TYPE_OUTPUT_PENALTY = 55
    OPERATION_TYPE_ADVICE_FEE = 56
    OPERATION_TYPE_TRANS_IIS_BS = 57
    OPERATION_TYPE_TRANS_BS_BS = 58
    OPERATION_TYPE_OUT_MULTI = 59
    OPERATION_TYPE_INP_MULTI = 60
    OPERATION_TYPE_OVER_PLACEMENT = 61
    OPERATION_TYPE_OVER_COM = 62
    OPERATION_TYPE_OVER_INCOME = 63
    OPERATION_TYPE_OPTION_EXPIRATION = 64
    OPERATION_TYPE_FUTURE_EXPIRATION = 65


class PortfolioSubscriptionStatus(betterproto.Enum):
    """Результат подписки."""

    PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED = 0
    PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS = 1
    PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2
    PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3


class PositionsAccountSubscriptionStatus(betterproto.Enum):
    """Результат подписки."""

    POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED = 0
    POSITIONS_SUBSCRIPTION_STATUS_SUCCESS = 1
    POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND = 2
    POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR = 3


class PortfolioRequestCurrencyRequest(betterproto.Enum):
    RUB = 0
    USD = 1
    EUR = 2


class OrderDirection(betterproto.Enum):
    """Направление операции."""

    ORDER_DIRECTION_UNSPECIFIED = 0
    ORDER_DIRECTION_BUY = 1
    ORDER_DIRECTION_SELL = 2


class OrderType(betterproto.Enum):
    """Тип заявки."""

    ORDER_TYPE_UNSPECIFIED = 0
    ORDER_TYPE_LIMIT = 1
    ORDER_TYPE_MARKET = 2
    ORDER_TYPE_BESTPRICE = 3


class OrderExecutionReportStatus(betterproto.Enum):
    """Текущий статус заявки (поручения)"""

    EXECUTION_REPORT_STATUS_UNSPECIFIED = 0
    EXECUTION_REPORT_STATUS_FILL = 1
    EXECUTION_REPORT_STATUS_REJECTED = 2
    EXECUTION_REPORT_STATUS_CANCELLED = 3
    EXECUTION_REPORT_STATUS_NEW = 4
    EXECUTION_REPORT_STATUS_PARTIALLYFILL = 5


class TimeInForceType(betterproto.Enum):
    """Алгоритм исполнения заявки"""

    TIME_IN_FORCE_UNSPECIFIED = 0
    TIME_IN_FORCE_DAY = 1
    TIME_IN_FORCE_FILL_AND_KILL = 2
    TIME_IN_FORCE_FILL_OR_KILL = 3


class OrderStateStreamResponseMarkerType(betterproto.Enum):
    MARKER_UNKNOWN = 0
    MARKER_BROKER = 1
    MARKER_CHAT = 2
    MARKER_PAPER = 3
    MARKER_MARGIN = 4
    MARKER_TKBNM = 5
    MARKER_SHORT = 6
    MARKER_SPECMM = 7
    MARKER_PO = 8


class OrderStateStreamResponseStatusCauseInfo(betterproto.Enum):
    CAUSE_UNSPECIFIED = 0
    CAUSE_CANCELLED_BY_CLIENT = 15
    CAUSE_CANCELLED_BY_EXCHANGE = 1
    CAUSE_CANCELLED_NOT_ENOUGH_POSITION = 2
    CAUSE_CANCELLED_BY_CLIENT_BLOCK = 3
    CAUSE_REJECTED_BY_BROKER = 4
    CAUSE_REJECTED_BY_EXCHANGE = 5
    CAUSE_CANCELLED_BY_BROKER = 6


class AccountType(betterproto.Enum):
    """Тип счёта."""

    ACCOUNT_TYPE_UNSPECIFIED = 0
    ACCOUNT_TYPE_TINKOFF = 1
    ACCOUNT_TYPE_TINKOFF_IIS = 2
    ACCOUNT_TYPE_INVEST_BOX = 3
    ACCOUNT_TYPE_INVEST_FUND = 4


class AccountStatus(betterproto.Enum):
    """Статус счёта."""

    ACCOUNT_STATUS_UNSPECIFIED = 0
    ACCOUNT_STATUS_NEW = 1
    ACCOUNT_STATUS_OPEN = 2
    ACCOUNT_STATUS_CLOSED = 3


class AccessLevel(betterproto.Enum):
    """Уровень доступа к счёту."""

    ACCOUNT_ACCESS_LEVEL_UNSPECIFIED = 0
    ACCOUNT_ACCESS_LEVEL_FULL_ACCESS = 1
    ACCOUNT_ACCESS_LEVEL_READ_ONLY = 2
    ACCOUNT_ACCESS_LEVEL_NO_ACCESS = 3


class StopOrderDirection(betterproto.Enum):
    """Направление сделки стоп-заявки."""

    STOP_ORDER_DIRECTION_UNSPECIFIED = 0
    STOP_ORDER_DIRECTION_BUY = 1
    STOP_ORDER_DIRECTION_SELL = 2


class StopOrderExpirationType(betterproto.Enum):
    """Тип экспирации стоп-заявке."""

    STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED = 0
    STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL = 1
    STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE = 2


class StopOrderType(betterproto.Enum):
    """Тип стоп-заявки."""

    STOP_ORDER_TYPE_UNSPECIFIED = 0
    STOP_ORDER_TYPE_TAKE_PROFIT = 1
    STOP_ORDER_TYPE_STOP_LOSS = 2
    STOP_ORDER_TYPE_STOP_LIMIT = 3


class StopOrderStatusOption(betterproto.Enum):
    """Статус стоп-заяки."""

    STOP_ORDER_STATUS_UNSPECIFIED = 0
    STOP_ORDER_STATUS_ALL = 1
    STOP_ORDER_STATUS_ACTIVE = 2
    STOP_ORDER_STATUS_EXECUTED = 3
    STOP_ORDER_STATUS_CANCELED = 4
    STOP_ORDER_STATUS_EXPIRED = 5


class ExchangeOrderType(betterproto.Enum):
    """Тип выставляемой заявки."""

    EXCHANGE_ORDER_TYPE_UNSPECIFIED = 0
    EXCHANGE_ORDER_TYPE_MARKET = 1
    EXCHANGE_ORDER_TYPE_LIMIT = 2


class TakeProfitType(betterproto.Enum):
    """Тип TakeProfit заявки."""

    TAKE_PROFIT_TYPE_UNSPECIFIED = 0
    TAKE_PROFIT_TYPE_REGULAR = 1
    TAKE_PROFIT_TYPE_TRAILING = 2


class TrailingValueType(betterproto.Enum):
    """Тип параметров значений Трейлинг-стопа"""

    TRAILING_VALUE_UNSPECIFIED = 0
    TRAILING_VALUE_ABSOLUTE = 1
    TRAILING_VALUE_RELATIVE = 2


class TrailingStopStatus(betterproto.Enum):
    """Статус Трейлинг-стопа"""

    TRAILING_STOP_UNSPECIFIED = 0
    TRAILING_STOP_ACTIVE = 1
    TRAILING_STOP_ACTIVATED = 2


@dataclass
class MoneyValue(betterproto.Message):
    """Денежная сумма в определённой валюте."""

    # Строковый ISO-код валюты.
    currency: str = betterproto.string_field(1)
    # Целая часть суммы, может быть отрицательным числом.
    units: int = betterproto.int64_field(2)
    # Дробная часть суммы, может быть отрицательным числом.
    nano: int = betterproto.int32_field(3)


@dataclass
class Quotation(betterproto.Message):
    """Котировка — денежная сумма без указания валюты."""

    # Целая часть суммы, может быть отрицательным числом.
    units: int = betterproto.int64_field(1)
    # Дробная часть суммы, может быть отрицательным числом.
    nano: int = betterproto.int32_field(2)


@dataclass
class Ping(betterproto.Message):
    """Проверка активности стрима."""

    time: datetime = betterproto.message_field(1)
    stream_id: str = betterproto.string_field(2)


@dataclass
class Page(betterproto.Message):
    limit: int = betterproto.int32_field(1)
    page_number: int = betterproto.int32_field(2)


@dataclass
class PageResponse(betterproto.Message):
    limit: int = betterproto.int32_field(1)
    page_number: int = betterproto.int32_field(2)
    total_count: int = betterproto.int32_field(3)


@dataclass
class ResponseMetadata(betterproto.Message):
    tracking_id: str = betterproto.string_field(42)
    server_time: datetime = betterproto.message_field(43)


@dataclass
class BrandData(betterproto.Message):
    logo_name: str = betterproto.string_field(1)
    logo_base_color: str = betterproto.string_field(2)
    text_color: str = betterproto.string_field(3)


@dataclass
class ErrorDetail(betterproto.Message):
    code: str = betterproto.string_field(1)
    message: str = betterproto.string_field(3)


@dataclass
class TradingSchedulesRequest(betterproto.Message):
    """Запрос расписания торгов."""

    exchange: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class TradingSchedulesResponse(betterproto.Message):
    """Список торговых площадок."""

    exchanges: List["TradingSchedule"] = betterproto.message_field(1)


@dataclass
class TradingSchedule(betterproto.Message):
    """Данные по торговой площадке."""

    exchange: str = betterproto.string_field(1)
    days: List["TradingDay"] = betterproto.message_field(2)


@dataclass
class TradingDay(betterproto.Message):
    """Информация о времени торгов."""

    date: datetime = betterproto.message_field(1)
    is_trading_day: bool = betterproto.bool_field(2)
    start_time: datetime = betterproto.message_field(3)
    end_time: datetime = betterproto.message_field(4)
    opening_auction_start_time: datetime = betterproto.message_field(7)
    closing_auction_end_time: datetime = betterproto.message_field(8)
    evening_opening_auction_start_time: datetime = betterproto.message_field(9)
    evening_start_time: datetime = betterproto.message_field(10)
    evening_end_time: datetime = betterproto.message_field(11)
    clearing_start_time: datetime = betterproto.message_field(12)
    clearing_end_time: datetime = betterproto.message_field(13)
    premarket_start_time: datetime = betterproto.message_field(14)
    premarket_end_time: datetime = betterproto.message_field(15)
    closing_auction_start_time: datetime = betterproto.message_field(16)
    opening_auction_end_time: datetime = betterproto.message_field(17)
    intervals: List["TradingInterval"] = betterproto.message_field(18)


@dataclass
class InstrumentRequest(betterproto.Message):
    """Запрос получения инструмента по идентификатору."""

    id_type: "InstrumentIdType" = betterproto.enum_field(1)
    class_code: str = betterproto.string_field(2)
    id: str = betterproto.string_field(3)


@dataclass
class InstrumentsRequest(betterproto.Message):
    """Запрос получения инструментов."""

    instrument_status: "InstrumentStatus" = betterproto.enum_field(1)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(2)


@dataclass
class FilterOptionsRequest(betterproto.Message):
    """Параметры фильтрации опционов."""

    basic_asset_uid: str = betterproto.string_field(1)
    basic_asset_position_uid: str = betterproto.string_field(2)


@dataclass
class BondResponse(betterproto.Message):
    """Информация об облигации."""

    instrument: "Bond" = betterproto.message_field(1)


@dataclass
class BondsResponse(betterproto.Message):
    """Список облигаций."""

    instruments: List["Bond"] = betterproto.message_field(1)


@dataclass
class GetBondCouponsRequest(betterproto.Message):
    """Запрос купонов по облигации."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetBondCouponsResponse(betterproto.Message):
    """Купоны по облигации."""

    events: List["Coupon"] = betterproto.message_field(1)


@dataclass
class GetBondEventsRequest(betterproto.Message):
    """События по облигации."""

    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)
    type: "GetBondEventsRequestEventType" = betterproto.enum_field(5)


@dataclass
class GetBondEventsResponse(betterproto.Message):
    """Объект передачи информации о событии облигации."""

    events: List["GetBondEventsResponseBondEvent"] = betterproto.message_field(1)


@dataclass
class GetBondEventsResponseBondEvent(betterproto.Message):
    instrument_id: str = betterproto.string_field(2)
    event_number: int = betterproto.int32_field(3)
    event_date: datetime = betterproto.message_field(4)
    event_type: "GetBondEventsRequestEventType" = betterproto.enum_field(5)
    event_total_vol: "Quotation" = betterproto.message_field(6)
    fix_date: datetime = betterproto.message_field(7)
    rate_date: datetime = betterproto.message_field(8)
    default_date: datetime = betterproto.message_field(9)
    real_pay_date: datetime = betterproto.message_field(10)
    pay_date: datetime = betterproto.message_field(11)
    pay_one_bond: "MoneyValue" = betterproto.message_field(12)
    money_flow_val: "MoneyValue" = betterproto.message_field(13)
    execution: str = betterproto.string_field(14)
    operation_type: str = betterproto.string_field(15)
    value: "Quotation" = betterproto.message_field(16)
    note: str = betterproto.string_field(17)
    convert_to_fin_tool_id: str = betterproto.string_field(18)
    coupon_start_date: datetime = betterproto.message_field(19)
    coupon_end_date: datetime = betterproto.message_field(20)
    coupon_period: int = betterproto.int32_field(21)
    coupon_interest_rate: "Quotation" = betterproto.message_field(22)


@dataclass
class Coupon(betterproto.Message):
    """Объект передачи информации о купоне облигации."""

    figi: str = betterproto.string_field(1)
    coupon_date: datetime = betterproto.message_field(2)
    coupon_number: int = betterproto.int64_field(3)
    fix_date: datetime = betterproto.message_field(4)
    pay_one_bond: "MoneyValue" = betterproto.message_field(5)
    coupon_type: "CouponType" = betterproto.enum_field(6)
    coupon_start_date: datetime = betterproto.message_field(7)
    coupon_end_date: datetime = betterproto.message_field(8)
    coupon_period: int = betterproto.int32_field(9)


@dataclass
class CurrencyResponse(betterproto.Message):
    """Данные по валюте."""

    instrument: "Currency" = betterproto.message_field(1)


@dataclass
class CurrenciesResponse(betterproto.Message):
    """Данные по валютам."""

    instruments: List["Currency"] = betterproto.message_field(1)


@dataclass
class EtfResponse(betterproto.Message):
    """Данные по фонду."""

    instrument: "Etf" = betterproto.message_field(1)


@dataclass
class EtfsResponse(betterproto.Message):
    """Данные по фондам."""

    instruments: List["Etf"] = betterproto.message_field(1)


@dataclass
class FutureResponse(betterproto.Message):
    """Данные по фьючерсу."""

    instrument: "Future" = betterproto.message_field(1)


@dataclass
class FuturesResponse(betterproto.Message):
    """Данные по фьючерсам."""

    instruments: List["Future"] = betterproto.message_field(1)


@dataclass
class OptionResponse(betterproto.Message):
    """Данные по опциону."""

    instrument: "Option" = betterproto.message_field(1)


@dataclass
class OptionsResponse(betterproto.Message):
    """Данные по опционам."""

    instruments: List["Option"] = betterproto.message_field(1)


@dataclass
class Option(betterproto.Message):
    """Опцион."""

    uid: str = betterproto.string_field(1)
    position_uid: str = betterproto.string_field(2)
    ticker: str = betterproto.string_field(3)
    class_code: str = betterproto.string_field(4)
    basic_asset_position_uid: str = betterproto.string_field(5)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(21)
    real_exchange: "RealExchange" = betterproto.enum_field(31)
    direction: "OptionDirection" = betterproto.enum_field(41)
    payment_type: "OptionPaymentType" = betterproto.enum_field(42)
    style: "OptionStyle" = betterproto.enum_field(43)
    settlement_type: "OptionSettlementType" = betterproto.enum_field(44)
    name: str = betterproto.string_field(101)
    currency: str = betterproto.string_field(111)
    settlement_currency: str = betterproto.string_field(112)
    asset_type: str = betterproto.string_field(131)
    basic_asset: str = betterproto.string_field(132)
    exchange: str = betterproto.string_field(141)
    country_of_risk: str = betterproto.string_field(151)
    country_of_risk_name: str = betterproto.string_field(152)
    sector: str = betterproto.string_field(161)
    brand: "BrandData" = betterproto.message_field(162)
    lot: int = betterproto.int32_field(201)
    basic_asset_size: "Quotation" = betterproto.message_field(211)
    klong: "Quotation" = betterproto.message_field(221)
    kshort: "Quotation" = betterproto.message_field(222)
    dlong: "Quotation" = betterproto.message_field(223)
    dshort: "Quotation" = betterproto.message_field(224)
    dlong_min: "Quotation" = betterproto.message_field(225)
    dshort_min: "Quotation" = betterproto.message_field(226)
    min_price_increment: "Quotation" = betterproto.message_field(231)
    strike_price: "MoneyValue" = betterproto.message_field(241)
    expiration_date: datetime = betterproto.message_field(301)
    first_trade_date: datetime = betterproto.message_field(311)
    last_trade_date: datetime = betterproto.message_field(312)
    first_1min_candle_date: datetime = betterproto.message_field(321)
    first_1day_candle_date: datetime = betterproto.message_field(322)
    short_enabled_flag: bool = betterproto.bool_field(401)
    for_iis_flag: bool = betterproto.bool_field(402)
    otc_flag: bool = betterproto.bool_field(403)
    buy_available_flag: bool = betterproto.bool_field(404)
    sell_available_flag: bool = betterproto.bool_field(405)
    for_qual_investor_flag: bool = betterproto.bool_field(406)
    weekend_flag: bool = betterproto.bool_field(407)
    blocked_tca_flag: bool = betterproto.bool_field(408)
    api_trade_available_flag: bool = betterproto.bool_field(409)


@dataclass
class ShareResponse(betterproto.Message):
    """Данные по акции."""

    instrument: "Share" = betterproto.message_field(1)


@dataclass
class SharesResponse(betterproto.Message):
    """Данные по акциям."""

    instruments: List["Share"] = betterproto.message_field(1)


@dataclass
class Bond(betterproto.Message):
    """Объект передачи информации об облигации."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    coupon_quantity_per_year: int = betterproto.int32_field(17)
    maturity_date: datetime = betterproto.message_field(18)
    nominal: "MoneyValue" = betterproto.message_field(19)
    initial_nominal: "MoneyValue" = betterproto.message_field(20)
    state_reg_date: datetime = betterproto.message_field(21)
    placement_date: datetime = betterproto.message_field(22)
    placement_price: "MoneyValue" = betterproto.message_field(23)
    aci_value: "MoneyValue" = betterproto.message_field(24)
    country_of_risk: str = betterproto.string_field(25)
    country_of_risk_name: str = betterproto.string_field(26)
    sector: str = betterproto.string_field(27)
    issue_kind: str = betterproto.string_field(28)
    issue_size: int = betterproto.int64_field(29)
    issue_size_plan: int = betterproto.int64_field(30)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(31)
    otc_flag: bool = betterproto.bool_field(32)
    buy_available_flag: bool = betterproto.bool_field(33)
    sell_available_flag: bool = betterproto.bool_field(34)
    floating_coupon_flag: bool = betterproto.bool_field(35)
    perpetual_flag: bool = betterproto.bool_field(36)
    amortization_flag: bool = betterproto.bool_field(37)
    min_price_increment: "Quotation" = betterproto.message_field(38)
    api_trade_available_flag: bool = betterproto.bool_field(39)
    uid: str = betterproto.string_field(40)
    real_exchange: "RealExchange" = betterproto.enum_field(41)
    position_uid: str = betterproto.string_field(42)
    asset_uid: str = betterproto.string_field(43)
    for_iis_flag: bool = betterproto.bool_field(51)
    for_qual_investor_flag: bool = betterproto.bool_field(52)
    weekend_flag: bool = betterproto.bool_field(53)
    blocked_tca_flag: bool = betterproto.bool_field(54)
    subordinated_flag: bool = betterproto.bool_field(55)
    liquidity_flag: bool = betterproto.bool_field(56)
    first_1min_candle_date: datetime = betterproto.message_field(61)
    first_1day_candle_date: datetime = betterproto.message_field(62)
    risk_level: "RiskLevel" = betterproto.enum_field(63)
    brand: "BrandData" = betterproto.message_field(64)
    bond_type: "BondType" = betterproto.enum_field(65)


@dataclass
class Currency(betterproto.Message):
    """Объект передачи информации о валюте."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    nominal: "MoneyValue" = betterproto.message_field(17)
    country_of_risk: str = betterproto.string_field(18)
    country_of_risk_name: str = betterproto.string_field(19)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(20)
    otc_flag: bool = betterproto.bool_field(21)
    buy_available_flag: bool = betterproto.bool_field(22)
    sell_available_flag: bool = betterproto.bool_field(23)
    iso_currency_name: str = betterproto.string_field(24)
    min_price_increment: "Quotation" = betterproto.message_field(25)
    api_trade_available_flag: bool = betterproto.bool_field(26)
    uid: str = betterproto.string_field(27)
    real_exchange: "RealExchange" = betterproto.enum_field(28)
    position_uid: str = betterproto.string_field(29)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(52)
    weekend_flag: bool = betterproto.bool_field(53)
    blocked_tca_flag: bool = betterproto.bool_field(54)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class Etf(betterproto.Message):
    """Объект передачи информации об инвестиционном фонде."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    fixed_commission: "Quotation" = betterproto.message_field(17)
    focus_type: str = betterproto.string_field(18)
    released_date: datetime = betterproto.message_field(19)
    num_shares: "Quotation" = betterproto.message_field(20)
    country_of_risk: str = betterproto.string_field(21)
    country_of_risk_name: str = betterproto.string_field(22)
    sector: str = betterproto.string_field(23)
    rebalancing_freq: str = betterproto.string_field(24)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    min_price_increment: "Quotation" = betterproto.message_field(29)
    api_trade_available_flag: bool = betterproto.bool_field(30)
    uid: str = betterproto.string_field(31)
    real_exchange: "RealExchange" = betterproto.enum_field(32)
    position_uid: str = betterproto.string_field(33)
    asset_uid: str = betterproto.string_field(34)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(35)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(42)
    weekend_flag: bool = betterproto.bool_field(43)
    blocked_tca_flag: bool = betterproto.bool_field(44)
    liquidity_flag: bool = betterproto.bool_field(45)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class Future(betterproto.Message):
    """Объект передачи информации о фьючерсе."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    lot: int = betterproto.int32_field(4)
    currency: str = betterproto.string_field(5)
    klong: "Quotation" = betterproto.message_field(6)
    kshort: "Quotation" = betterproto.message_field(7)
    dlong: "Quotation" = betterproto.message_field(8)
    dshort: "Quotation" = betterproto.message_field(9)
    dlong_min: "Quotation" = betterproto.message_field(10)
    dshort_min: "Quotation" = betterproto.message_field(11)
    short_enabled_flag: bool = betterproto.bool_field(12)
    name: str = betterproto.string_field(13)
    exchange: str = betterproto.string_field(14)
    first_trade_date: datetime = betterproto.message_field(15)
    last_trade_date: datetime = betterproto.message_field(16)
    futures_type: str = betterproto.string_field(17)
    asset_type: str = betterproto.string_field(18)
    basic_asset: str = betterproto.string_field(19)
    basic_asset_size: "Quotation" = betterproto.message_field(20)
    country_of_risk: str = betterproto.string_field(21)
    country_of_risk_name: str = betterproto.string_field(22)
    sector: str = betterproto.string_field(23)
    expiration_date: datetime = betterproto.message_field(24)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    min_price_increment: "Quotation" = betterproto.message_field(29)
    api_trade_available_flag: bool = betterproto.bool_field(30)
    uid: str = betterproto.string_field(31)
    real_exchange: "RealExchange" = betterproto.enum_field(32)
    position_uid: str = betterproto.string_field(33)
    basic_asset_position_uid: str = betterproto.string_field(34)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(42)
    weekend_flag: bool = betterproto.bool_field(43)
    blocked_tca_flag: bool = betterproto.bool_field(44)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    initial_margin_on_buy: "MoneyValue" = betterproto.message_field(61)
    initial_margin_on_sell: "MoneyValue" = betterproto.message_field(62)
    min_price_increment_amount: "Quotation" = betterproto.message_field(63)
    brand: "BrandData" = betterproto.message_field(64)


@dataclass
class Share(betterproto.Message):
    """Объект передачи информации об акции."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    ipo_date: datetime = betterproto.message_field(17)
    issue_size: int = betterproto.int64_field(18)
    country_of_risk: str = betterproto.string_field(19)
    country_of_risk_name: str = betterproto.string_field(20)
    sector: str = betterproto.string_field(21)
    issue_size_plan: int = betterproto.int64_field(22)
    nominal: "MoneyValue" = betterproto.message_field(23)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    div_yield_flag: bool = betterproto.bool_field(29)
    share_type: "ShareType" = betterproto.enum_field(30)
    min_price_increment: "Quotation" = betterproto.message_field(31)
    api_trade_available_flag: bool = betterproto.bool_field(32)
    uid: str = betterproto.string_field(33)
    real_exchange: "RealExchange" = betterproto.enum_field(34)
    position_uid: str = betterproto.string_field(35)
    asset_uid: str = betterproto.string_field(36)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(37)
    for_iis_flag: bool = betterproto.bool_field(46)
    for_qual_investor_flag: bool = betterproto.bool_field(47)
    weekend_flag: bool = betterproto.bool_field(48)
    blocked_tca_flag: bool = betterproto.bool_field(49)
    liquidity_flag: bool = betterproto.bool_field(50)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class GetAccruedInterestsRequest(betterproto.Message):
    """Запрос НКД по облигации."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetAccruedInterestsResponse(betterproto.Message):
    """НКД облигации."""

    accrued_interests: List["AccruedInterest"] = betterproto.message_field(1)


@dataclass
class AccruedInterest(betterproto.Message):
    """Операция начисления купонов."""

    date: datetime = betterproto.message_field(1)
    value: "Quotation" = betterproto.message_field(2)
    value_percent: "Quotation" = betterproto.message_field(3)
    nominal: "Quotation" = betterproto.message_field(4)


@dataclass
class GetFuturesMarginRequest(betterproto.Message):
    """Запрос информации о фьючерсе"""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetFuturesMarginResponse(betterproto.Message):
    """Данные по фьючерсу"""

    initial_margin_on_buy: "MoneyValue" = betterproto.message_field(1)
    initial_margin_on_sell: "MoneyValue" = betterproto.message_field(2)
    min_price_increment: "Quotation" = betterproto.message_field(3)
    min_price_increment_amount: "Quotation" = betterproto.message_field(4)


@dataclass
class InstrumentResponse(betterproto.Message):
    """Данные по инструменту."""

    instrument: "Instrument" = betterproto.message_field(1)


@dataclass
class Instrument(betterproto.Message):
    """Объект передачи основной информации об инструменте."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(14)
    exchange: str = betterproto.string_field(15)
    country_of_risk: str = betterproto.string_field(16)
    country_of_risk_name: str = betterproto.string_field(17)
    instrument_type: str = betterproto.string_field(18)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(19)
    otc_flag: bool = betterproto.bool_field(20)
    buy_available_flag: bool = betterproto.bool_field(21)
    sell_available_flag: bool = betterproto.bool_field(22)
    min_price_increment: "Quotation" = betterproto.message_field(23)
    api_trade_available_flag: bool = betterproto.bool_field(24)
    uid: str = betterproto.string_field(25)
    real_exchange: "RealExchange" = betterproto.enum_field(26)
    position_uid: str = betterproto.string_field(27)
    asset_uid: str = betterproto.string_field(28)
    for_iis_flag: bool = betterproto.bool_field(36)
    for_qual_investor_flag: bool = betterproto.bool_field(37)
    weekend_flag: bool = betterproto.bool_field(38)
    blocked_tca_flag: bool = betterproto.bool_field(39)
    instrument_kind: "InstrumentType" = betterproto.enum_field(40)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class GetDividendsRequest(betterproto.Message):
    """Запрос дивидендов."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetDividendsResponse(betterproto.Message):
    """Дивиденды."""

    dividends: List["Dividend"] = betterproto.message_field(1)


@dataclass
class Dividend(betterproto.Message):
    """Информация о выплате."""

    dividend_net: "MoneyValue" = betterproto.message_field(1)
    payment_date: datetime = betterproto.message_field(2)
    declared_date: datetime = betterproto.message_field(3)
    last_buy_date: datetime = betterproto.message_field(4)
    dividend_type: str = betterproto.string_field(5)
    record_date: datetime = betterproto.message_field(6)
    regularity: str = betterproto.string_field(7)
    close_price: "MoneyValue" = betterproto.message_field(8)
    yield_value: "Quotation" = betterproto.message_field(9)
    created_at: datetime = betterproto.message_field(10)


@dataclass
class AssetRequest(betterproto.Message):
    """Запрос актива по идентификатору."""

    id: str = betterproto.string_field(1)


@dataclass
class AssetResponse(betterproto.Message):
    """Данные по активу."""

    asset: "AssetFull" = betterproto.message_field(1)


@dataclass
class AssetsRequest(betterproto.Message):
    """Запрос списка активов."""

    instrument_type: "InstrumentType" = betterproto.enum_field(1)


@dataclass
class AssetsResponse(betterproto.Message):
    """Список активов."""

    assets: List["Asset"] = betterproto.message_field(1)


@dataclass
class AssetFull(betterproto.Message):
    uid: str = betterproto.string_field(1)
    type: "AssetType" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)
    name_brief: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    deleted_at: datetime = betterproto.message_field(6)
    required_tests: List[str] = betterproto.string_field(7)
    currency: "AssetCurrency" = betterproto.message_field(8, group="ext")
    security: "AssetSecurity" = betterproto.message_field(9, group="ext")
    gos_reg_code: str = betterproto.string_field(10)
    cfi: str = betterproto.string_field(11)
    code_nsd: str = betterproto.string_field(12)
    status: str = betterproto.string_field(13)
    brand: "Brand" = betterproto.message_field(14)
    updated_at: datetime = betterproto.message_field(15)
    br_code: str = betterproto.string_field(16)
    br_code_name: str = betterproto.string_field(17)
    instruments: List["AssetInstrument"] = betterproto.message_field(18)


@dataclass
class Asset(betterproto.Message):
    """Информация об активе."""

    uid: str = betterproto.string_field(1)
    type: "AssetType" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)
    instruments: List["AssetInstrument"] = betterproto.message_field(4)


@dataclass
class AssetCurrency(betterproto.Message):
    """Валюта."""

    base_currency: str = betterproto.string_field(1)


@dataclass
class AssetSecurity(betterproto.Message):
    """Ценная бумага."""

    isin: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    share: "AssetShare" = betterproto.message_field(3, group="ext")
    bond: "AssetBond" = betterproto.message_field(4, group="ext")
    sp: "AssetStructuredProduct" = betterproto.message_field(5, group="ext")
    etf: "AssetEtf" = betterproto.message_field(6, group="ext")
    clearing_certificate: "AssetClearingCertificate" = betterproto.message_field(
        7, group="ext"
    )


@dataclass
class AssetShare(betterproto.Message):
    """Акция."""

    type: "ShareType" = betterproto.enum_field(1)
    issue_size: "Quotation" = betterproto.message_field(2)
    nominal: "Quotation" = betterproto.message_field(3)
    nominal_currency: str = betterproto.string_field(4)
    primary_index: str = betterproto.string_field(5)
    dividend_rate: "Quotation" = betterproto.message_field(6)
    preferred_share_type: str = betterproto.string_field(7)
    ipo_date: datetime = betterproto.message_field(8)
    registry_date: datetime = betterproto.message_field(9)
    div_yield_flag: bool = betterproto.bool_field(10)
    issue_kind: str = betterproto.string_field(11)
    placement_date: datetime = betterproto.message_field(12)
    repres_isin: str = betterproto.string_field(13)
    issue_size_plan: "Quotation" = betterproto.message_field(14)
    total_float: "Quotation" = betterproto.message_field(15)


@dataclass
class AssetBond(betterproto.Message):
    """Облигация."""

    current_nominal: "Quotation" = betterproto.message_field(1)
    borrow_name: str = betterproto.string_field(2)
    issue_size: "Quotation" = betterproto.message_field(3)
    nominal: "Quotation" = betterproto.message_field(4)
    nominal_currency: str = betterproto.string_field(5)
    issue_kind: str = betterproto.string_field(6)
    interest_kind: str = betterproto.string_field(7)
    coupon_quantity_per_year: int = betterproto.int32_field(8)
    indexed_nominal_flag: bool = betterproto.bool_field(9)
    subordinated_flag: bool = betterproto.bool_field(10)
    collateral_flag: bool = betterproto.bool_field(11)
    tax_free_flag: bool = betterproto.bool_field(12)
    amortization_flag: bool = betterproto.bool_field(13)
    floating_coupon_flag: bool = betterproto.bool_field(14)
    perpetual_flag: bool = betterproto.bool_field(15)
    maturity_date: datetime = betterproto.message_field(16)
    return_condition: str = betterproto.string_field(17)
    state_reg_date: datetime = betterproto.message_field(18)
    placement_date: datetime = betterproto.message_field(19)
    placement_price: "Quotation" = betterproto.message_field(20)
    issue_size_plan: "Quotation" = betterproto.message_field(21)


@dataclass
class AssetStructuredProduct(betterproto.Message):
    """Структурная нота."""

    borrow_name: str = betterproto.string_field(1)
    nominal: "Quotation" = betterproto.message_field(2)
    nominal_currency: str = betterproto.string_field(3)
    type: "StructuredProductType" = betterproto.enum_field(4)
    logic_portfolio: str = betterproto.string_field(5)
    asset_type: "AssetType" = betterproto.enum_field(6)
    basic_asset: str = betterproto.string_field(7)
    safety_barrier: "Quotation" = betterproto.message_field(8)
    maturity_date: datetime = betterproto.message_field(9)
    issue_size_plan: "Quotation" = betterproto.message_field(10)
    issue_size: "Quotation" = betterproto.message_field(11)
    placement_date: datetime = betterproto.message_field(12)
    issue_kind: str = betterproto.string_field(13)


@dataclass
class AssetEtf(betterproto.Message):
    """Фонд."""

    total_expense: "Quotation" = betterproto.message_field(1)
    hurdle_rate: "Quotation" = betterproto.message_field(2)
    performance_fee: "Quotation" = betterproto.message_field(3)
    fixed_commission: "Quotation" = betterproto.message_field(4)
    payment_type: str = betterproto.string_field(5)
    watermark_flag: bool = betterproto.bool_field(6)
    buy_premium: "Quotation" = betterproto.message_field(7)
    sell_discount: "Quotation" = betterproto.message_field(8)
    rebalancing_flag: bool = betterproto.bool_field(9)
    rebalancing_freq: str = betterproto.string_field(10)
    management_type: str = betterproto.string_field(11)
    primary_index: str = betterproto.string_field(12)
    focus_type: str = betterproto.string_field(13)
    leveraged_flag: bool = betterproto.bool_field(14)
    num_share: "Quotation" = betterproto.message_field(15)
    ucits_flag: bool = betterproto.bool_field(16)
    released_date: datetime = betterproto.message_field(17)
    description: str = betterproto.string_field(18)
    primary_index_description: str = betterproto.string_field(19)
    primary_index_company: str = betterproto.string_field(20)
    index_recovery_period: "Quotation" = betterproto.message_field(21)
    inav_code: str = betterproto.string_field(22)
    div_yield_flag: bool = betterproto.bool_field(23)
    expense_commission: "Quotation" = betterproto.message_field(24)
    primary_index_tracking_error: "Quotation" = betterproto.message_field(25)
    rebalancing_plan: str = betterproto.string_field(26)
    tax_rate: str = betterproto.string_field(27)
    rebalancing_dates: List[datetime] = betterproto.message_field(28)
    issue_kind: str = betterproto.string_field(29)
    nominal: "Quotation" = betterproto.message_field(30)
    nominal_currency: str = betterproto.string_field(31)


@dataclass
class AssetClearingCertificate(betterproto.Message):
    """Клиринговый сертификат участия."""

    nominal: "Quotation" = betterproto.message_field(1)
    nominal_currency: str = betterproto.string_field(2)


@dataclass
class Brand(betterproto.Message):
    """Бренд."""

    uid: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    info: str = betterproto.string_field(4)
    company: str = betterproto.string_field(5)
    sector: str = betterproto.string_field(6)
    country_of_risk: str = betterproto.string_field(7)
    country_of_risk_name: str = betterproto.string_field(8)


@dataclass
class AssetInstrument(betterproto.Message):
    """Идентификаторы инструмента."""

    uid: str = betterproto.string_field(1)
    figi: str = betterproto.string_field(2)
    instrument_type: str = betterproto.string_field(3)
    ticker: str = betterproto.string_field(4)
    class_code: str = betterproto.string_field(5)
    links: List["InstrumentLink"] = betterproto.message_field(6)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    position_uid: str = betterproto.string_field(11)


@dataclass
class InstrumentLink(betterproto.Message):
    """Связь с другим инструментом."""

    type: str = betterproto.string_field(1)
    instrument_uid: str = betterproto.string_field(2)


@dataclass
class GetFavoritesRequest(betterproto.Message):
    """
    Запрос списка избранных инструментов, входные параметры не требуются.
    """

    pass


@dataclass
class GetFavoritesResponse(betterproto.Message):
    """В ответ передаётся список избранных инструментов в качестве массива."""

    favorite_instruments: List["FavoriteInstrument"] = betterproto.message_field(1)


@dataclass
class FavoriteInstrument(betterproto.Message):
    """Массив избранных инструментов."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    instrument_type: str = betterproto.string_field(11)
    name: str = betterproto.string_field(12)
    uid: str = betterproto.string_field(13)
    otc_flag: bool = betterproto.bool_field(16)
    api_trade_available_flag: bool = betterproto.bool_field(17)
    instrument_kind: "InstrumentType" = betterproto.enum_field(18)


@dataclass
class EditFavoritesRequest(betterproto.Message):
    """Запрос редактирования списка избранных инструментов."""

    instruments: List["EditFavoritesRequestInstrument"] = betterproto.message_field(1)
    action_type: "EditFavoritesActionType" = betterproto.enum_field(6)


@dataclass
class EditFavoritesRequestInstrument(betterproto.Message):
    """
    Массив инструментов для редактирования списка избранных инструментов.
    """

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class EditFavoritesResponse(betterproto.Message):
    """Результат редактирования списка избранных инструментов."""

    favorite_instruments: List["FavoriteInstrument"] = betterproto.message_field(1)


@dataclass
class GetCountriesRequest(betterproto.Message):
    """Запрос справочника стран."""

    pass


@dataclass
class GetCountriesResponse(betterproto.Message):
    """Справочник стран."""

    countries: List["CountryResponse"] = betterproto.message_field(1)


@dataclass
class IndicativesRequest(betterproto.Message):
    """Запрос справочника индексов и товаров"""

    pass


@dataclass
class IndicativesResponse(betterproto.Message):
    """Справочник индексов и товаров"""

    instruments: List["IndicativeResponse"] = betterproto.message_field(1)


@dataclass
class IndicativeResponse(betterproto.Message):
    """Индикатив"""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    currency: str = betterproto.string_field(4)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    name: str = betterproto.string_field(12)
    exchange: str = betterproto.string_field(13)
    uid: str = betterproto.string_field(14)
    buy_available_flag: bool = betterproto.bool_field(404)
    sell_available_flag: bool = betterproto.bool_field(405)


@dataclass
class CountryResponse(betterproto.Message):
    """Данные о стране."""

    alfa_two: str = betterproto.string_field(1)
    alfa_three: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    name_brief: str = betterproto.string_field(4)


@dataclass
class FindInstrumentRequest(betterproto.Message):
    """Запрос на поиск инструментов."""

    query: str = betterproto.string_field(1)
    instrument_kind: "InstrumentType" = betterproto.enum_field(2)
    api_trade_available_flag: bool = betterproto.bool_field(3)


@dataclass
class FindInstrumentResponse(betterproto.Message):
    """Результат поиска инструментов."""

    instruments: List["InstrumentShort"] = betterproto.message_field(1)


@dataclass
class InstrumentShort(betterproto.Message):
    """Краткая информация об инструменте."""

    isin: str = betterproto.string_field(1)
    figi: str = betterproto.string_field(2)
    ticker: str = betterproto.string_field(3)
    class_code: str = betterproto.string_field(4)
    instrument_type: str = betterproto.string_field(5)
    name: str = betterproto.string_field(6)
    uid: str = betterproto.string_field(7)
    position_uid: str = betterproto.string_field(8)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    api_trade_available_flag: bool = betterproto.bool_field(11)
    for_iis_flag: bool = betterproto.bool_field(12)
    first_1min_candle_date: datetime = betterproto.message_field(26)
    first_1day_candle_date: datetime = betterproto.message_field(27)
    for_qual_investor_flag: bool = betterproto.bool_field(28)
    weekend_flag: bool = betterproto.bool_field(29)
    blocked_tca_flag: bool = betterproto.bool_field(30)


@dataclass
class GetBrandsRequest(betterproto.Message):
    """Запрос списка брендов."""

    paging: "Page" = betterproto.message_field(1)


@dataclass
class GetBrandRequest(betterproto.Message):
    """Запрос бренда."""

    id: str = betterproto.string_field(1)


@dataclass
class GetBrandsResponse(betterproto.Message):
    """Список брендов."""

    brands: List["Brand"] = betterproto.message_field(1)
    paging: "PageResponse" = betterproto.message_field(2)


@dataclass
class GetAssetFundamentalsRequest(betterproto.Message):
    """Запрос фундаментальных показателей"""

    assets: List[str] = betterproto.string_field(1)


@dataclass
class GetAssetFundamentalsResponse(betterproto.Message):
    """Фундаментальные показатели"""

    fundamentals: List["GetAssetFundamentalsResponseStatisticResponse"] = (
        betterproto.message_field(1)
    )


@dataclass
class GetAssetFundamentalsResponseStatisticResponse(betterproto.Message):
    """Фундаментальные показатели по активу"""

    asset_uid: str = betterproto.string_field(1)
    currency: str = betterproto.string_field(2)
    market_capitalization: float = betterproto.double_field(3)
    high_price_last_52_weeks: float = betterproto.double_field(4)
    low_price_last_52_weeks: float = betterproto.double_field(5)
    average_daily_volume_last_10_days: float = betterproto.double_field(6)
    average_daily_volume_last_4_weeks: float = betterproto.double_field(7)
    beta: float = betterproto.double_field(8)
    free_float: float = betterproto.double_field(9)
    forward_annual_dividend_yield: float = betterproto.double_field(10)
    shares_outstanding: float = betterproto.double_field(11)
    revenue_ttm: float = betterproto.double_field(12)
    ebitda_ttm: float = betterproto.double_field(13)
    net_income_ttm: float = betterproto.double_field(14)
    eps_ttm: float = betterproto.double_field(15)
    diluted_eps_ttm: float = betterproto.double_field(16)
    free_cash_flow_ttm: float = betterproto.double_field(17)
    five_year_annual_revenue_growth_rate: float = betterproto.double_field(18)
    three_year_annual_revenue_growth_rate: float = betterproto.double_field(19)
    pe_ratio_ttm: float = betterproto.double_field(20)
    price_to_sales_ttm: float = betterproto.double_field(21)
    price_to_book_ttm: float = betterproto.double_field(22)
    price_to_free_cash_flow_ttm: float = betterproto.double_field(23)
    total_enterprise_value_mrq: float = betterproto.double_field(24)
    ev_to_ebitda_mrq: float = betterproto.double_field(25)
    net_margin_mrq: float = betterproto.double_field(26)
    net_interest_margin_mrq: float = betterproto.double_field(27)
    roe: float = betterproto.double_field(28)
    roa: float = betterproto.double_field(29)
    roic: float = betterproto.double_field(30)
    total_debt_mrq: float = betterproto.double_field(31)
    total_debt_to_equity_mrq: float = betterproto.double_field(32)
    total_debt_to_ebitda_mrq: float = betterproto.double_field(33)
    free_cash_flow_to_price: float = betterproto.double_field(34)
    net_debt_to_ebitda: float = betterproto.double_field(35)
    current_ratio_mrq: float = betterproto.double_field(36)
    fixed_charge_coverage_ratio_fy: float = betterproto.double_field(37)
    dividend_yield_daily_ttm: float = betterproto.double_field(38)
    dividend_rate_ttm: float = betterproto.double_field(39)
    dividends_per_share: float = betterproto.double_field(40)
    five_years_average_dividend_yield: float = betterproto.double_field(41)
    five_year_annual_dividend_growth_rate: float = betterproto.double_field(42)
    dividend_payout_ratio_fy: float = betterproto.double_field(43)
    buy_back_ttm: float = betterproto.double_field(44)
    one_year_annual_revenue_growth_rate: float = betterproto.double_field(45)
    domicile_indicator_code: str = betterproto.string_field(46)
    adr_to_common_share_ratio: float = betterproto.double_field(47)
    number_of_employees: float = betterproto.double_field(48)
    ex_dividend_date: datetime = betterproto.message_field(49)
    fiscal_period_start_date: datetime = betterproto.message_field(50)
    fiscal_period_end_date: datetime = betterproto.message_field(51)
    revenue_change_five_years: float = betterproto.double_field(53)
    eps_change_five_years: float = betterproto.double_field(54)
    ebitda_change_five_years: float = betterproto.double_field(55)
    total_debt_change_five_years: float = betterproto.double_field(56)
    ev_to_sales: float = betterproto.double_field(57)


@dataclass
class GetAssetReportsRequest(betterproto.Message):
    """Запрос отчетов эмитентов"""

    instrument_id: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class GetAssetReportsResponse(betterproto.Message):
    """Отчеты эмитентов"""

    events: List["GetAssetReportsResponseGetAssetReportsEvent"] = (
        betterproto.message_field(1)
    )


@dataclass
class GetAssetReportsResponseGetAssetReportsEvent(betterproto.Message):
    """Отчет"""

    instrument_id: str = betterproto.string_field(1)
    report_date: datetime = betterproto.message_field(2)
    period_year: int = betterproto.int32_field(3)
    period_num: int = betterproto.int32_field(4)
    period_type: "GetAssetReportsResponseAssetReportPeriodType" = (
        betterproto.enum_field(5)
    )
    created_at: datetime = betterproto.message_field(6)


@dataclass
class GetConsensusForecastsRequest(betterproto.Message):
    """Запрос консенсус-прогнозов"""

    paging: "Page" = betterproto.message_field(1)


@dataclass
class GetConsensusForecastsResponse(betterproto.Message):
    """Консенсус-прогнозы"""

    items: List["GetConsensusForecastsResponseConsensusForecastsItem"] = (
        betterproto.message_field(1)
    )
    page: "PageResponse" = betterproto.message_field(2)


@dataclass
class GetConsensusForecastsResponseConsensusForecastsItem(betterproto.Message):
    """Прогноз"""

    uid: str = betterproto.string_field(1)
    asset_uid: str = betterproto.string_field(2)
    created_at: datetime = betterproto.message_field(3)
    best_target_price: "Quotation" = betterproto.message_field(4)
    best_target_low: "Quotation" = betterproto.message_field(5)
    best_target_high: "Quotation" = betterproto.message_field(6)
    total_buy_recommend: int = betterproto.int32_field(7)
    total_hold_recommend: int = betterproto.int32_field(8)
    total_sell_recommend: int = betterproto.int32_field(9)
    currency: str = betterproto.string_field(10)
    consensus: "Recommendation" = betterproto.enum_field(11)
    prognosis_date: datetime = betterproto.message_field(12)


@dataclass
class GetForecastRequest(betterproto.Message):
    """Запрос прогнозов инвестдомов."""

    instrument_id: str = betterproto.string_field(1)


@dataclass
class GetForecastResponse(betterproto.Message):
    """Прогнозы инвестдомов по инструменту."""

    targets: List["GetForecastResponseTargetItem"] = betterproto.message_field(1)
    consensus: "GetForecastResponseConsensusItem" = betterproto.message_field(2)


@dataclass
class GetForecastResponseTargetItem(betterproto.Message):
    """Прогноз"""

    uid: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    company: str = betterproto.string_field(3)
    recommendation: "Recommendation" = betterproto.enum_field(4)
    recommendation_date: datetime = betterproto.message_field(5)
    currency: str = betterproto.string_field(6)
    current_price: "Quotation" = betterproto.message_field(7)
    target_price: "Quotation" = betterproto.message_field(8)
    price_change: "Quotation" = betterproto.message_field(9)
    price_change_rel: "Quotation" = betterproto.message_field(10)
    show_name: str = betterproto.string_field(11)


@dataclass
class GetForecastResponseConsensusItem(betterproto.Message):
    """Консенсус-прогноз."""

    uid: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    recommendation: "Recommendation" = betterproto.enum_field(3)
    currency: str = betterproto.string_field(4)
    current_price: "Quotation" = betterproto.message_field(5)
    consensus: "Quotation" = betterproto.message_field(6)
    min_target: "Quotation" = betterproto.message_field(7)
    max_target: "Quotation" = betterproto.message_field(8)
    price_change: "Quotation" = betterproto.message_field(9)
    price_change_rel: "Quotation" = betterproto.message_field(10)


@dataclass
class TradingInterval(betterproto.Message):
    type: str = betterproto.string_field(1)
    interval: "TradingIntervalTimeInterval" = betterproto.message_field(2)


@dataclass
class TradingIntervalTimeInterval(betterproto.Message):
    start_ts: datetime = betterproto.message_field(1)
    end_ts: datetime = betterproto.message_field(2)


@dataclass
class MarketDataRequest(betterproto.Message):
    """Запрос подписки или отписки на определённые биржевые данные."""

    subscribe_candles_request: "SubscribeCandlesRequest" = betterproto.message_field(
        1, group="payload"
    )
    subscribe_order_book_request: "SubscribeOrderBookRequest" = (
        betterproto.message_field(2, group="payload")
    )
    subscribe_trades_request: "SubscribeTradesRequest" = betterproto.message_field(
        3, group="payload"
    )
    subscribe_info_request: "SubscribeInfoRequest" = betterproto.message_field(
        4, group="payload"
    )
    subscribe_last_price_request: "SubscribeLastPriceRequest" = (
        betterproto.message_field(5, group="payload")
    )
    get_my_subscriptions: "GetMySubscriptions" = betterproto.message_field(
        6, group="payload"
    )


@dataclass
class MarketDataServerSideStreamRequest(betterproto.Message):
    subscribe_candles_request: "SubscribeCandlesRequest" = betterproto.message_field(1)
    subscribe_order_book_request: "SubscribeOrderBookRequest" = (
        betterproto.message_field(2)
    )
    subscribe_trades_request: "SubscribeTradesRequest" = betterproto.message_field(3)
    subscribe_info_request: "SubscribeInfoRequest" = betterproto.message_field(4)
    subscribe_last_price_request: "SubscribeLastPriceRequest" = (
        betterproto.message_field(5)
    )


@dataclass
class MarketDataResponse(betterproto.Message):
    """Пакет биржевой информации по подписке."""

    subscribe_candles_response: "SubscribeCandlesResponse" = betterproto.message_field(
        1, group="payload"
    )
    subscribe_order_book_response: "SubscribeOrderBookResponse" = (
        betterproto.message_field(2, group="payload")
    )
    subscribe_trades_response: "SubscribeTradesResponse" = betterproto.message_field(
        3, group="payload"
    )
    subscribe_info_response: "SubscribeInfoResponse" = betterproto.message_field(
        4, group="payload"
    )
    candle: "Candle" = betterproto.message_field(5, group="payload")
    trade: "Trade" = betterproto.message_field(6, group="payload")
    orderbook: "OrderBook" = betterproto.message_field(7, group="payload")
    trading_status: "TradingStatus" = betterproto.message_field(8, group="payload")
    ping: "Ping" = betterproto.message_field(9, group="payload")
    subscribe_last_price_response: "SubscribeLastPriceResponse" = (
        betterproto.message_field(10, group="payload")
    )
    last_price: "LastPrice" = betterproto.message_field(11, group="payload")


@dataclass
class SubscribeCandlesRequest(betterproto.Message):
    """subscribeCandles | Изменения статуса подписки на свечи."""

    subscription_action: "SubscriptionAction" = betterproto.enum_field(1)
    instruments: List["CandleInstrument"] = betterproto.message_field(2)
    waiting_close: bool = betterproto.bool_field(3)


@dataclass
class CandleInstrument(betterproto.Message):
    """Запрос изменения статус подписки на свечи."""

    figi: str = betterproto.string_field(1)
    interval: "SubscriptionInterval" = betterproto.enum_field(2)
    instrument_id: str = betterproto.string_field(3)


@dataclass
class SubscribeCandlesResponse(betterproto.Message):
    """Результат изменения статус подписки на свечи."""

    tracking_id: str = betterproto.string_field(1)
    candles_subscriptions: List["CandleSubscription"] = betterproto.message_field(2)


@dataclass
class CandleSubscription(betterproto.Message):
    """Статус подписки на свечи."""

    figi: str = betterproto.string_field(1)
    interval: "SubscriptionInterval" = betterproto.enum_field(2)
    subscription_status: "SubscriptionStatus" = betterproto.enum_field(3)
    instrument_uid: str = betterproto.string_field(4)
    waiting_close: bool = betterproto.bool_field(5)
    stream_id: str = betterproto.string_field(6)
    subscription_id: str = betterproto.string_field(7)


@dataclass
class SubscribeOrderBookRequest(betterproto.Message):
    """Запрос на изменение статуса подписки на стаканы."""

    subscription_action: "SubscriptionAction" = betterproto.enum_field(1)
    instruments: List["OrderBookInstrument"] = betterproto.message_field(2)


@dataclass
class OrderBookInstrument(betterproto.Message):
    """Запрос подписки на стаканы."""

    figi: str = betterproto.string_field(1)
    depth: int = betterproto.int32_field(2)
    instrument_id: str = betterproto.string_field(3)
    order_book_type: "OrderBookType" = betterproto.enum_field(4)


@dataclass
class SubscribeOrderBookResponse(betterproto.Message):
    """Результат изменения статуса подписки на стаканы."""

    tracking_id: str = betterproto.string_field(1)
    order_book_subscriptions: List["OrderBookSubscription"] = betterproto.message_field(
        2
    )


@dataclass
class OrderBookSubscription(betterproto.Message):
    """Статус подписки."""

    figi: str = betterproto.string_field(1)
    depth: int = betterproto.int32_field(2)
    subscription_status: "SubscriptionStatus" = betterproto.enum_field(3)
    instrument_uid: str = betterproto.string_field(4)
    stream_id: str = betterproto.string_field(5)
    subscription_id: str = betterproto.string_field(6)
    order_book_type: "OrderBookType" = betterproto.enum_field(7)


@dataclass
class SubscribeTradesRequest(betterproto.Message):
    """Изменение статуса подписки на поток обезличенных сделок."""

    subscription_action: "SubscriptionAction" = betterproto.enum_field(1)
    instruments: List["TradeInstrument"] = betterproto.message_field(2)
    trade_type: "TradeSourceType" = betterproto.enum_field(3)


@dataclass
class TradeInstrument(betterproto.Message):
    """Запрос подписки на поток обезличенных сделок."""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class SubscribeTradesResponse(betterproto.Message):
    """Результат изменения статуса подписки на поток обезличенных сделок."""

    tracking_id: str = betterproto.string_field(1)
    trade_subscriptions: List["TradeSubscription"] = betterproto.message_field(2)
    trade_type: "TradeSourceType" = betterproto.enum_field(3)


@dataclass
class TradeSubscription(betterproto.Message):
    """Статус подписки."""

    figi: str = betterproto.string_field(1)
    subscription_status: "SubscriptionStatus" = betterproto.enum_field(2)
    instrument_uid: str = betterproto.string_field(3)
    stream_id: str = betterproto.string_field(4)
    subscription_id: str = betterproto.string_field(5)


@dataclass
class SubscribeInfoRequest(betterproto.Message):
    """Изменение статуса подписки на торговый статус инструмента."""

    subscription_action: "SubscriptionAction" = betterproto.enum_field(1)
    instruments: List["InfoInstrument"] = betterproto.message_field(2)


@dataclass
class InfoInstrument(betterproto.Message):
    """Запрос подписки на торговый статус."""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class SubscribeInfoResponse(betterproto.Message):
    """Результат изменения статуса подписки на торговый статус."""

    tracking_id: str = betterproto.string_field(1)
    info_subscriptions: List["InfoSubscription"] = betterproto.message_field(2)


@dataclass
class InfoSubscription(betterproto.Message):
    """Статус подписки."""

    figi: str = betterproto.string_field(1)
    subscription_status: "SubscriptionStatus" = betterproto.enum_field(2)
    instrument_uid: str = betterproto.string_field(3)
    stream_id: str = betterproto.string_field(4)
    subscription_id: str = betterproto.string_field(5)


@dataclass
class SubscribeLastPriceRequest(betterproto.Message):
    """Изменение статуса подписки на цену последней сделки по инструменту."""

    subscription_action: "SubscriptionAction" = betterproto.enum_field(1)
    instruments: List["LastPriceInstrument"] = betterproto.message_field(2)


@dataclass
class LastPriceInstrument(betterproto.Message):
    """Запрос подписки на последнюю цену."""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class SubscribeLastPriceResponse(betterproto.Message):
    """Результат изменения статуса подписки на цену последней сделки."""

    tracking_id: str = betterproto.string_field(1)
    last_price_subscriptions: List["LastPriceSubscription"] = betterproto.message_field(
        2
    )


@dataclass
class LastPriceSubscription(betterproto.Message):
    """Статус подписки на цену последней сделки."""

    figi: str = betterproto.string_field(1)
    subscription_status: "SubscriptionStatus" = betterproto.enum_field(2)
    instrument_uid: str = betterproto.string_field(3)
    stream_id: str = betterproto.string_field(4)
    subscription_id: str = betterproto.string_field(5)


@dataclass
class Candle(betterproto.Message):
    """Пакет свечей в рамках стрима."""

    figi: str = betterproto.string_field(1)
    interval: "SubscriptionInterval" = betterproto.enum_field(2)
    open: "Quotation" = betterproto.message_field(3)
    high: "Quotation" = betterproto.message_field(4)
    low: "Quotation" = betterproto.message_field(5)
    close: "Quotation" = betterproto.message_field(6)
    volume: int = betterproto.int64_field(7)
    time: datetime = betterproto.message_field(8)
    last_trade_ts: datetime = betterproto.message_field(9)
    instrument_uid: str = betterproto.string_field(10)


@dataclass
class OrderBook(betterproto.Message):
    """Пакет стаканов в рамках стрима."""

    figi: str = betterproto.string_field(1)
    depth: int = betterproto.int32_field(2)
    is_consistent: bool = betterproto.bool_field(3)
    bids: List["Order"] = betterproto.message_field(4)
    asks: List["Order"] = betterproto.message_field(5)
    time: datetime = betterproto.message_field(6)
    limit_up: "Quotation" = betterproto.message_field(7)
    limit_down: "Quotation" = betterproto.message_field(8)
    instrument_uid: str = betterproto.string_field(9)
    order_book_type: "OrderBookType" = betterproto.enum_field(10)


@dataclass
class Order(betterproto.Message):
    """Массив предложений/спроса."""

    price: "Quotation" = betterproto.message_field(1)
    quantity: int = betterproto.int64_field(2)


@dataclass
class Trade(betterproto.Message):
    """Информация о сделке."""

    figi: str = betterproto.string_field(1)
    direction: "TradeDirection" = betterproto.enum_field(2)
    price: "Quotation" = betterproto.message_field(3)
    quantity: int = betterproto.int64_field(4)
    time: datetime = betterproto.message_field(5)
    instrument_uid: str = betterproto.string_field(6)
    trade_source: "TradeSourceType" = betterproto.enum_field(7)


@dataclass
class TradingStatus(betterproto.Message):
    """Пакет изменения торгового статуса."""

    figi: str = betterproto.string_field(1)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(2)
    time: datetime = betterproto.message_field(3)
    limit_order_available_flag: bool = betterproto.bool_field(4)
    market_order_available_flag: bool = betterproto.bool_field(5)
    instrument_uid: str = betterproto.string_field(6)


@dataclass
class GetCandlesRequest(betterproto.Message):
    """Запрос исторических свечей."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    interval: "CandleInterval" = betterproto.enum_field(4)
    instrument_id: str = betterproto.string_field(5)
    candle_source_type: "GetCandlesRequestCandleSource" = betterproto.enum_field(7)


@dataclass
class GetCandlesResponse(betterproto.Message):
    """Список свечей."""

    candles: List["HistoricCandle"] = betterproto.message_field(1)


@dataclass
class HistoricCandle(betterproto.Message):
    """Информация о свече."""

    open: "Quotation" = betterproto.message_field(1)
    high: "Quotation" = betterproto.message_field(2)
    low: "Quotation" = betterproto.message_field(3)
    close: "Quotation" = betterproto.message_field(4)
    volume: int = betterproto.int64_field(5)
    time: datetime = betterproto.message_field(6)
    is_complete: bool = betterproto.bool_field(7)
    candle_source: "CandleSource" = betterproto.enum_field(9)


@dataclass
class GetLastPricesRequest(betterproto.Message):
    """Запрос получения цен последних сделок."""

    figi: List[str] = betterproto.string_field(1)
    instrument_id: List[str] = betterproto.string_field(2)


@dataclass
class GetLastPricesResponse(betterproto.Message):
    """Список цен последних сделок."""

    last_prices: List["LastPrice"] = betterproto.message_field(1)


@dataclass
class LastPrice(betterproto.Message):
    """Информация о цене последней сделки."""

    figi: str = betterproto.string_field(1)
    price: "Quotation" = betterproto.message_field(2)
    time: datetime = betterproto.message_field(3)
    instrument_uid: str = betterproto.string_field(11)


@dataclass
class GetOrderBookRequest(betterproto.Message):
    """Запрос стакана."""

    figi: str = betterproto.string_field(1)
    depth: int = betterproto.int32_field(2)
    instrument_id: str = betterproto.string_field(3)


@dataclass
class GetOrderBookResponse(betterproto.Message):
    """Информация о стакане."""

    figi: str = betterproto.string_field(1)
    depth: int = betterproto.int32_field(2)
    bids: List["Order"] = betterproto.message_field(3)
    asks: List["Order"] = betterproto.message_field(4)
    last_price: "Quotation" = betterproto.message_field(5)
    close_price: "Quotation" = betterproto.message_field(6)
    limit_up: "Quotation" = betterproto.message_field(7)
    limit_down: "Quotation" = betterproto.message_field(8)
    last_price_ts: datetime = betterproto.message_field(21)
    close_price_ts: datetime = betterproto.message_field(22)
    orderbook_ts: datetime = betterproto.message_field(23)
    instrument_uid: str = betterproto.string_field(9)


@dataclass
class GetTradingStatusRequest(betterproto.Message):
    """Запрос получения торгового статуса."""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class GetTradingStatusesRequest(betterproto.Message):
    """Запрос получения торгового статуса."""

    instrument_id: List[str] = betterproto.string_field(1)


@dataclass
class GetTradingStatusesResponse(betterproto.Message):
    """Информация о торговом статусе."""

    trading_statuses: List["GetTradingStatusResponse"] = betterproto.message_field(1)


@dataclass
class GetTradingStatusResponse(betterproto.Message):
    """Информация о торговом статусе."""

    figi: str = betterproto.string_field(1)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(2)
    limit_order_available_flag: bool = betterproto.bool_field(3)
    market_order_available_flag: bool = betterproto.bool_field(4)
    api_trade_available_flag: bool = betterproto.bool_field(5)
    instrument_uid: str = betterproto.string_field(6)
    bestprice_order_available_flag: bool = betterproto.bool_field(8)
    only_best_price: bool = betterproto.bool_field(9)


@dataclass
class GetLastTradesRequest(betterproto.Message):
    """Запрос обезличенных сделок за последний час."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetLastTradesResponse(betterproto.Message):
    """Обезличенных сделок за последний час."""

    trades: List["Trade"] = betterproto.message_field(1)


@dataclass
class GetMySubscriptions(betterproto.Message):
    """
    Запрос активных подписок. Запрос вернет по одному сообщению на каждый тип
    активных подписок (SubscribeLastPriceResponse, SubscribeInfoResponse,
    SubscribeTradesResponse, SubscribeOrderBookResponse,
    SubscribeCandlesResponse)
    """

    pass


@dataclass
class GetClosePricesRequest(betterproto.Message):
    """Запрос цен закрытия торговой сессии по инструментам."""

    instruments: List["InstrumentClosePriceRequest"] = betterproto.message_field(1)


@dataclass
class InstrumentClosePriceRequest(betterproto.Message):
    """Запрос цен закрытия торговой сессии по инструменту."""

    instrument_id: str = betterproto.string_field(1)


@dataclass
class GetClosePricesResponse(betterproto.Message):
    """Цены закрытия торговой сессии по инструментам."""

    close_prices: List["InstrumentClosePriceResponse"] = betterproto.message_field(1)


@dataclass
class InstrumentClosePriceResponse(betterproto.Message):
    """Цена закрытия торговой сессии по инструменту."""

    figi: str = betterproto.string_field(1)
    instrument_uid: str = betterproto.string_field(2)
    price: "Quotation" = betterproto.message_field(11)
    evening_session_price: "Quotation" = betterproto.message_field(12)
    time: datetime = betterproto.message_field(21)


@dataclass
class GetTechAnalysisRequest(betterproto.Message):
    indicator_type: "GetTechAnalysisRequestIndicatorType" = betterproto.enum_field(1)
    instrument_uid: str = betterproto.string_field(2)
    from_: datetime = betterproto.message_field(3)
    to: datetime = betterproto.message_field(4)
    interval: "GetTechAnalysisRequestIndicatorInterval" = betterproto.enum_field(5)
    type_of_price: "GetTechAnalysisRequestTypeOfPrice" = betterproto.enum_field(6)
    length: int = betterproto.int32_field(7)
    deviation: "GetTechAnalysisRequestDeviation" = betterproto.message_field(8)
    smoothing: "GetTechAnalysisRequestSmoothing" = betterproto.message_field(9)


@dataclass
class GetTechAnalysisRequestSmoothing(betterproto.Message):
    fast_length: int = betterproto.int32_field(1)
    slow_length: int = betterproto.int32_field(2)
    signal_smoothing: int = betterproto.int32_field(3)


@dataclass
class GetTechAnalysisRequestDeviation(betterproto.Message):
    deviation_multiplier: "Quotation" = betterproto.message_field(1)


@dataclass
class GetTechAnalysisResponse(betterproto.Message):
    technical_indicators: List["GetTechAnalysisResponseTechAnalysisItem"] = (
        betterproto.message_field(1)
    )


@dataclass
class GetTechAnalysisResponseTechAnalysisItem(betterproto.Message):
    timestamp: datetime = betterproto.message_field(1)
    middle_band: "Quotation" = betterproto.message_field(2)
    upper_band: "Quotation" = betterproto.message_field(3)
    lower_band: "Quotation" = betterproto.message_field(4)
    signal: "Quotation" = betterproto.message_field(5)
    macd: "Quotation" = betterproto.message_field(6)


@dataclass
class OperationsRequest(betterproto.Message):
    """Запрос получения списка операций по счёту."""

    account_id: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    state: "OperationState" = betterproto.enum_field(4)
    figi: str = betterproto.string_field(5)


@dataclass
class OperationsResponse(betterproto.Message):
    """Список операций."""

    operations: List["Operation"] = betterproto.message_field(1)


@dataclass
class Operation(betterproto.Message):
    """Данные по операции."""

    id: str = betterproto.string_field(1)
    parent_operation_id: str = betterproto.string_field(2)
    currency: str = betterproto.string_field(3)
    payment: "MoneyValue" = betterproto.message_field(4)
    price: "MoneyValue" = betterproto.message_field(5)
    state: "OperationState" = betterproto.enum_field(6)
    quantity: int = betterproto.int64_field(7)
    quantity_rest: int = betterproto.int64_field(8)
    figi: str = betterproto.string_field(9)
    instrument_type: str = betterproto.string_field(10)
    date: datetime = betterproto.message_field(11)
    type: str = betterproto.string_field(12)
    operation_type: "OperationType" = betterproto.enum_field(13)
    trades: List["OperationTrade"] = betterproto.message_field(14)
    asset_uid: str = betterproto.string_field(16)
    position_uid: str = betterproto.string_field(17)
    instrument_uid: str = betterproto.string_field(18)


@dataclass
class OperationTrade(betterproto.Message):
    """Сделка по операции."""

    trade_id: str = betterproto.string_field(1)
    date_time: datetime = betterproto.message_field(2)
    quantity: int = betterproto.int64_field(3)
    price: "MoneyValue" = betterproto.message_field(4)


@dataclass
class PortfolioRequest(betterproto.Message):
    """Запрос получения текущего портфеля по счёту."""

    account_id: str = betterproto.string_field(1)
    currency: "PortfolioRequestCurrencyRequest" = betterproto.enum_field(2)


@dataclass
class PortfolioResponse(betterproto.Message):
    """Текущий портфель по счёту."""

    total_amount_shares: "MoneyValue" = betterproto.message_field(1)
    total_amount_bonds: "MoneyValue" = betterproto.message_field(2)
    total_amount_etf: "MoneyValue" = betterproto.message_field(3)
    total_amount_currencies: "MoneyValue" = betterproto.message_field(4)
    total_amount_futures: "MoneyValue" = betterproto.message_field(5)
    expected_yield: "Quotation" = betterproto.message_field(6)
    positions: List["PortfolioPosition"] = betterproto.message_field(7)
    account_id: str = betterproto.string_field(8)
    total_amount_options: "MoneyValue" = betterproto.message_field(9)
    total_amount_sp: "MoneyValue" = betterproto.message_field(10)
    total_amount_portfolio: "MoneyValue" = betterproto.message_field(11)
    virtual_positions: List["VirtualPortfolioPosition"] = betterproto.message_field(12)


@dataclass
class PositionsRequest(betterproto.Message):
    """Запрос позиций портфеля по счёту."""

    account_id: str = betterproto.string_field(1)


@dataclass
class PositionsResponse(betterproto.Message):
    """Список позиций по счёту."""

    money: List["MoneyValue"] = betterproto.message_field(1)
    blocked: List["MoneyValue"] = betterproto.message_field(2)
    securities: List["PositionsSecurities"] = betterproto.message_field(3)
    limits_loading_in_progress: bool = betterproto.bool_field(4)
    futures: List["PositionsFutures"] = betterproto.message_field(5)
    options: List["PositionsOptions"] = betterproto.message_field(6)


@dataclass
class WithdrawLimitsRequest(betterproto.Message):
    """Запрос доступного для вывода остатка."""

    account_id: str = betterproto.string_field(1)


@dataclass
class WithdrawLimitsResponse(betterproto.Message):
    """Доступный для вывода остаток."""

    money: List["MoneyValue"] = betterproto.message_field(1)
    blocked: List["MoneyValue"] = betterproto.message_field(2)
    blocked_guarantee: List["MoneyValue"] = betterproto.message_field(3)


@dataclass
class PortfolioPosition(betterproto.Message):
    """Позиции портфеля."""

    figi: str = betterproto.string_field(1)
    instrument_type: str = betterproto.string_field(2)
    quantity: "Quotation" = betterproto.message_field(3)
    average_position_price: "MoneyValue" = betterproto.message_field(4)
    expected_yield: "Quotation" = betterproto.message_field(5)
    current_nkd: "MoneyValue" = betterproto.message_field(6)
    average_position_price_pt: "Quotation" = betterproto.message_field(7)
    current_price: "MoneyValue" = betterproto.message_field(8)
    average_position_price_fifo: "MoneyValue" = betterproto.message_field(9)
    quantity_lots: "Quotation" = betterproto.message_field(10)
    blocked: bool = betterproto.bool_field(21)
    blocked_lots: "Quotation" = betterproto.message_field(22)
    position_uid: str = betterproto.string_field(24)
    instrument_uid: str = betterproto.string_field(25)
    var_margin: "MoneyValue" = betterproto.message_field(26)
    expected_yield_fifo: "Quotation" = betterproto.message_field(27)


@dataclass
class VirtualPortfolioPosition(betterproto.Message):
    position_uid: str = betterproto.string_field(1)
    instrument_uid: str = betterproto.string_field(2)
    figi: str = betterproto.string_field(3)
    instrument_type: str = betterproto.string_field(4)
    quantity: "Quotation" = betterproto.message_field(5)
    average_position_price: "MoneyValue" = betterproto.message_field(6)
    expected_yield: "Quotation" = betterproto.message_field(7)
    expected_yield_fifo: "Quotation" = betterproto.message_field(8)
    expire_date: datetime = betterproto.message_field(9)
    current_price: "MoneyValue" = betterproto.message_field(10)
    average_position_price_fifo: "MoneyValue" = betterproto.message_field(11)


@dataclass
class PositionsSecurities(betterproto.Message):
    """Баланс позиции ценной бумаги."""

    figi: str = betterproto.string_field(1)
    blocked: int = betterproto.int64_field(2)
    balance: int = betterproto.int64_field(3)
    position_uid: str = betterproto.string_field(4)
    instrument_uid: str = betterproto.string_field(5)
    exchange_blocked: bool = betterproto.bool_field(11)
    instrument_type: str = betterproto.string_field(16)


@dataclass
class PositionsFutures(betterproto.Message):
    """Баланс фьючерса."""

    figi: str = betterproto.string_field(1)
    blocked: int = betterproto.int64_field(2)
    balance: int = betterproto.int64_field(3)
    position_uid: str = betterproto.string_field(4)
    instrument_uid: str = betterproto.string_field(5)


@dataclass
class PositionsOptions(betterproto.Message):
    """Баланс опциона."""

    position_uid: str = betterproto.string_field(1)
    instrument_uid: str = betterproto.string_field(2)
    blocked: int = betterproto.int64_field(11)
    balance: int = betterproto.int64_field(21)


@dataclass
class BrokerReportRequest(betterproto.Message):
    generate_broker_report_request: "GenerateBrokerReportRequest" = (
        betterproto.message_field(1, group="payload")
    )
    get_broker_report_request: "GetBrokerReportRequest" = betterproto.message_field(
        2, group="payload"
    )


@dataclass
class BrokerReportResponse(betterproto.Message):
    generate_broker_report_response: "GenerateBrokerReportResponse" = (
        betterproto.message_field(1, group="payload")
    )
    get_broker_report_response: "GetBrokerReportResponse" = betterproto.message_field(
        2, group="payload"
    )


@dataclass
class GenerateBrokerReportRequest(betterproto.Message):
    account_id: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class GenerateBrokerReportResponse(betterproto.Message):
    task_id: str = betterproto.string_field(1)


@dataclass
class GetBrokerReportRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    page: int = betterproto.int32_field(2)


@dataclass
class GetBrokerReportResponse(betterproto.Message):
    broker_report: List["BrokerReport"] = betterproto.message_field(1)
    items_count: int = betterproto.int32_field(2)
    pages_count: int = betterproto.int32_field(3)
    page: int = betterproto.int32_field(4)


@dataclass
class BrokerReport(betterproto.Message):
    trade_id: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)
    figi: str = betterproto.string_field(3)
    execute_sign: str = betterproto.string_field(4)
    trade_datetime: datetime = betterproto.message_field(5)
    exchange: str = betterproto.string_field(6)
    class_code: str = betterproto.string_field(7)
    direction: str = betterproto.string_field(8)
    name: str = betterproto.string_field(9)
    ticker: str = betterproto.string_field(10)
    price: "MoneyValue" = betterproto.message_field(11)
    quantity: int = betterproto.int64_field(12)
    order_amount: "MoneyValue" = betterproto.message_field(13)
    aci_value: "Quotation" = betterproto.message_field(14)
    total_order_amount: "MoneyValue" = betterproto.message_field(15)
    broker_commission: "MoneyValue" = betterproto.message_field(16)
    exchange_commission: "MoneyValue" = betterproto.message_field(17)
    exchange_clearing_commission: "MoneyValue" = betterproto.message_field(18)
    repo_rate: "Quotation" = betterproto.message_field(19)
    party: str = betterproto.string_field(20)
    clear_value_date: datetime = betterproto.message_field(21)
    sec_value_date: datetime = betterproto.message_field(22)
    broker_status: str = betterproto.string_field(23)
    separate_agreement_type: str = betterproto.string_field(24)
    separate_agreement_number: str = betterproto.string_field(25)
    separate_agreement_date: str = betterproto.string_field(26)
    delivery_type: str = betterproto.string_field(27)


@dataclass
class GetDividendsForeignIssuerRequest(betterproto.Message):
    generate_div_foreign_issuer_report: (
        "GenerateDividendsForeignIssuerReportRequest"
    ) = betterproto.message_field(1, group="payload")
    get_div_foreign_issuer_report: "GetDividendsForeignIssuerReportRequest" = (
        betterproto.message_field(2, group="payload")
    )


@dataclass
class GetDividendsForeignIssuerResponse(betterproto.Message):
    generate_div_foreign_issuer_report_response: (
        "GenerateDividendsForeignIssuerReportResponse"
    ) = betterproto.message_field(1, group="payload")
    div_foreign_issuer_report: "GetDividendsForeignIssuerReportResponse" = (
        betterproto.message_field(2, group="payload")
    )


@dataclass
class GenerateDividendsForeignIssuerReportRequest(betterproto.Message):
    """
    Объект запроса формирования отчёта "Справка о доходах за пределами РФ".
    """

    account_id: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class GetDividendsForeignIssuerReportRequest(betterproto.Message):
    """
    Объект запроса сформированного отчёта "Справка о доходах за пределами РФ".
    """

    task_id: str = betterproto.string_field(1)
    page: int = betterproto.int32_field(2)


@dataclass
class GenerateDividendsForeignIssuerReportResponse(betterproto.Message):
    """
    Объект результата задачи запуска формирования отчёта "Справка о доходах за
    пределами РФ".
    """

    task_id: str = betterproto.string_field(1)


@dataclass
class GetDividendsForeignIssuerReportResponse(betterproto.Message):
    dividends_foreign_issuer_report: List["DividendsForeignIssuerReport"] = (
        betterproto.message_field(1)
    )
    items_count: int = betterproto.int32_field(2)
    pages_count: int = betterproto.int32_field(3)
    page: int = betterproto.int32_field(4)


@dataclass
class DividendsForeignIssuerReport(betterproto.Message):
    """Отчёт "Справка о доходах за пределами РФ"."""

    record_date: datetime = betterproto.message_field(1)
    payment_date: datetime = betterproto.message_field(2)
    security_name: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    issuer_country: str = betterproto.string_field(5)
    quantity: int = betterproto.int64_field(6)
    dividend: "Quotation" = betterproto.message_field(7)
    external_commission: "Quotation" = betterproto.message_field(8)
    dividend_gross: "Quotation" = betterproto.message_field(9)
    tax: "Quotation" = betterproto.message_field(10)
    dividend_amount: "Quotation" = betterproto.message_field(11)
    currency: str = betterproto.string_field(12)


@dataclass
class PortfolioStreamRequest(betterproto.Message):
    """Запрос установки stream-соединения."""

    accounts: List[str] = betterproto.string_field(1)


@dataclass
class PortfolioStreamResponse(betterproto.Message):
    """Информация по позициям и доходностям портфелей."""

    subscriptions: "PortfolioSubscriptionResult" = betterproto.message_field(
        1, group="payload"
    )
    portfolio: "PortfolioResponse" = betterproto.message_field(2, group="payload")
    ping: "Ping" = betterproto.message_field(3, group="payload")


@dataclass
class PortfolioSubscriptionResult(betterproto.Message):
    """Объект результата подписки."""

    accounts: List["AccountSubscriptionStatus"] = betterproto.message_field(1)


@dataclass
class AccountSubscriptionStatus(betterproto.Message):
    """Счет клиента."""

    account_id: str = betterproto.string_field(1)
    subscription_status: "PortfolioSubscriptionStatus" = betterproto.enum_field(6)


@dataclass
class GetOperationsByCursorRequest(betterproto.Message):
    """Запрос списка операций по счёту с пагинацией."""

    account_id: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)
    from_: datetime = betterproto.message_field(6)
    to: datetime = betterproto.message_field(7)
    cursor: str = betterproto.string_field(11)
    limit: int = betterproto.int32_field(12)
    operation_types: List["OperationType"] = betterproto.enum_field(13)
    state: "OperationState" = betterproto.enum_field(14)
    without_commissions: bool = betterproto.bool_field(15)
    without_trades: bool = betterproto.bool_field(16)
    without_overnights: bool = betterproto.bool_field(17)


@dataclass
class GetOperationsByCursorResponse(betterproto.Message):
    """Список операций по счёту с пагинацией."""

    has_next: bool = betterproto.bool_field(1)
    next_cursor: str = betterproto.string_field(2)
    items: List["OperationItem"] = betterproto.message_field(6)


@dataclass
class OperationItem(betterproto.Message):
    """Данные об операции."""

    cursor: str = betterproto.string_field(1)
    broker_account_id: str = betterproto.string_field(6)
    id: str = betterproto.string_field(16)
    parent_operation_id: str = betterproto.string_field(17)
    name: str = betterproto.string_field(18)
    date: datetime = betterproto.message_field(21)
    type: "OperationType" = betterproto.enum_field(22)
    description: str = betterproto.string_field(23)
    state: "OperationState" = betterproto.enum_field(24)
    instrument_uid: str = betterproto.string_field(31)
    figi: str = betterproto.string_field(32)
    instrument_type: str = betterproto.string_field(33)
    instrument_kind: "InstrumentType" = betterproto.enum_field(34)
    position_uid: str = betterproto.string_field(35)
    payment: "MoneyValue" = betterproto.message_field(41)
    price: "MoneyValue" = betterproto.message_field(42)
    commission: "MoneyValue" = betterproto.message_field(43)
    yield_: "MoneyValue" = betterproto.message_field(44)
    yield_relative: "Quotation" = betterproto.message_field(45)
    accrued_int: "MoneyValue" = betterproto.message_field(46)
    quantity: int = betterproto.int64_field(51)
    quantity_rest: int = betterproto.int64_field(52)
    quantity_done: int = betterproto.int64_field(53)
    cancel_date_time: datetime = betterproto.message_field(56)
    cancel_reason: str = betterproto.string_field(57)
    trades_info: "OperationItemTrades" = betterproto.message_field(61)
    asset_uid: str = betterproto.string_field(64)


@dataclass
class OperationItemTrades(betterproto.Message):
    """Массив с информацией о сделках."""

    trades: List["OperationItemTrade"] = betterproto.message_field(6)


@dataclass
class OperationItemTrade(betterproto.Message):
    """Сделка по операции."""

    num: str = betterproto.string_field(1)
    date: datetime = betterproto.message_field(6)
    quantity: int = betterproto.int64_field(11)
    price: "MoneyValue" = betterproto.message_field(16)
    yield_: "MoneyValue" = betterproto.message_field(21)
    yield_relative: "Quotation" = betterproto.message_field(22)


@dataclass
class PositionsStreamRequest(betterproto.Message):
    """Запрос установки stream-соединения позиций."""

    accounts: List[str] = betterproto.string_field(1)


@dataclass
class PositionsStreamResponse(betterproto.Message):
    """Информация по изменению позиций портфеля."""

    subscriptions: "PositionsSubscriptionResult" = betterproto.message_field(
        1, group="payload"
    )
    position: "PositionData" = betterproto.message_field(2, group="payload")
    ping: "Ping" = betterproto.message_field(3, group="payload")


@dataclass
class PositionsSubscriptionResult(betterproto.Message):
    """Объект результата подписки."""

    accounts: List["PositionsSubscriptionStatus"] = betterproto.message_field(1)


@dataclass
class PositionsSubscriptionStatus(betterproto.Message):
    """Счет клиента."""

    account_id: str = betterproto.string_field(1)
    subscription_status: "PositionsAccountSubscriptionStatus" = betterproto.enum_field(
        6
    )


@dataclass
class PositionData(betterproto.Message):
    """Данные о позиции портфеля."""

    account_id: str = betterproto.string_field(1)
    money: List["PositionsMoney"] = betterproto.message_field(2)
    securities: List["PositionsSecurities"] = betterproto.message_field(3)
    futures: List["PositionsFutures"] = betterproto.message_field(4)
    options: List["PositionsOptions"] = betterproto.message_field(5)
    date: datetime = betterproto.message_field(6)


@dataclass
class PositionsMoney(betterproto.Message):
    """Валютная позиция портфеля."""

    available_value: "MoneyValue" = betterproto.message_field(1)
    blocked_value: "MoneyValue" = betterproto.message_field(2)


@dataclass
class TradesStreamRequest(betterproto.Message):
    """Запрос установки соединения."""

    accounts: List[str] = betterproto.string_field(1)


@dataclass
class TradesStreamResponse(betterproto.Message):
    """Информация о торговых поручениях."""

    order_trades: "OrderTrades" = betterproto.message_field(1, group="payload")
    ping: "Ping" = betterproto.message_field(2, group="payload")


@dataclass
class OrderTrades(betterproto.Message):
    """Информация об исполнении торгового поручения."""

    order_id: str = betterproto.string_field(1)
    created_at: datetime = betterproto.message_field(2)
    direction: "OrderDirection" = betterproto.enum_field(3)
    figi: str = betterproto.string_field(4)
    trades: List["OrderTrade"] = betterproto.message_field(5)
    account_id: str = betterproto.string_field(6)
    instrument_uid: str = betterproto.string_field(7)


@dataclass
class OrderTrade(betterproto.Message):
    """Информация о сделке."""

    date_time: datetime = betterproto.message_field(1)
    price: "Quotation" = betterproto.message_field(2)
    quantity: int = betterproto.int64_field(3)
    trade_id: str = betterproto.string_field(4)


@dataclass
class PostOrderRequest(betterproto.Message):
    """Запрос выставления торгового поручения."""

    figi: str = betterproto.string_field(1)
    quantity: int = betterproto.int64_field(2)
    price: "Quotation" = betterproto.message_field(3)
    direction: "OrderDirection" = betterproto.enum_field(4)
    account_id: str = betterproto.string_field(5)
    order_type: "OrderType" = betterproto.enum_field(6)
    order_id: str = betterproto.string_field(7)
    instrument_id: str = betterproto.string_field(8)
    time_in_force: "TimeInForceType" = betterproto.enum_field(9)
    price_type: "PriceType" = betterproto.enum_field(10)


@dataclass
class PostOrderResponse(betterproto.Message):
    """Информация о выставлении поручения."""

    order_id: str = betterproto.string_field(1)
    execution_report_status: "OrderExecutionReportStatus" = betterproto.enum_field(2)
    lots_requested: int = betterproto.int64_field(3)
    lots_executed: int = betterproto.int64_field(4)
    initial_order_price: "MoneyValue" = betterproto.message_field(5)
    executed_order_price: "MoneyValue" = betterproto.message_field(6)
    total_order_amount: "MoneyValue" = betterproto.message_field(7)
    initial_commission: "MoneyValue" = betterproto.message_field(8)
    executed_commission: "MoneyValue" = betterproto.message_field(9)
    aci_value: "MoneyValue" = betterproto.message_field(10)
    figi: str = betterproto.string_field(11)
    direction: "OrderDirection" = betterproto.enum_field(12)
    initial_security_price: "MoneyValue" = betterproto.message_field(13)
    order_type: "OrderType" = betterproto.enum_field(14)
    message: str = betterproto.string_field(15)
    initial_order_price_pt: "Quotation" = betterproto.message_field(16)
    instrument_uid: str = betterproto.string_field(17)
    order_request_id: str = betterproto.string_field(20)
    response_metadata: "ResponseMetadata" = betterproto.message_field(254)


@dataclass
class CancelOrderRequest(betterproto.Message):
    """Запрос отмены торгового поручения."""

    account_id: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass
class CancelOrderResponse(betterproto.Message):
    """Результат отмены торгового поручения."""

    time: datetime = betterproto.message_field(1)
    response_metadata: "ResponseMetadata" = betterproto.message_field(254)


@dataclass
class GetOrderStateRequest(betterproto.Message):
    """Запрос получения статуса торгового поручения."""

    account_id: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)
    price_type: "PriceType" = betterproto.enum_field(3)


@dataclass
class GetOrdersRequest(betterproto.Message):
    """Запрос получения списка активных торговых поручений."""

    account_id: str = betterproto.string_field(1)


@dataclass
class GetOrdersResponse(betterproto.Message):
    """Список активных торговых поручений."""

    orders: List["OrderState"] = betterproto.message_field(1)


@dataclass
class OrderState(betterproto.Message):
    """Информация о торговом поручении."""

    order_id: str = betterproto.string_field(1)
    execution_report_status: "OrderExecutionReportStatus" = betterproto.enum_field(2)
    lots_requested: int = betterproto.int64_field(3)
    lots_executed: int = betterproto.int64_field(4)
    initial_order_price: "MoneyValue" = betterproto.message_field(5)
    executed_order_price: "MoneyValue" = betterproto.message_field(6)
    total_order_amount: "MoneyValue" = betterproto.message_field(7)
    average_position_price: "MoneyValue" = betterproto.message_field(8)
    initial_commission: "MoneyValue" = betterproto.message_field(9)
    executed_commission: "MoneyValue" = betterproto.message_field(10)
    figi: str = betterproto.string_field(11)
    direction: "OrderDirection" = betterproto.enum_field(12)
    initial_security_price: "MoneyValue" = betterproto.message_field(13)
    stages: List["OrderStage"] = betterproto.message_field(14)
    service_commission: "MoneyValue" = betterproto.message_field(15)
    currency: str = betterproto.string_field(16)
    order_type: "OrderType" = betterproto.enum_field(17)
    order_date: datetime = betterproto.message_field(18)
    instrument_uid: str = betterproto.string_field(19)
    order_request_id: str = betterproto.string_field(20)


@dataclass
class OrderStage(betterproto.Message):
    """Сделки в рамках торгового поручения."""

    price: "MoneyValue" = betterproto.message_field(1)
    quantity: int = betterproto.int64_field(2)
    trade_id: str = betterproto.string_field(3)
    execution_time: datetime = betterproto.message_field(5)


@dataclass
class ReplaceOrderRequest(betterproto.Message):
    """Запрос изменения выставленной заявки."""

    account_id: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(6)
    idempotency_key: str = betterproto.string_field(7)
    quantity: int = betterproto.int64_field(11)
    price: "Quotation" = betterproto.message_field(12)
    price_type: "PriceType" = betterproto.enum_field(13)


@dataclass
class GetMaxLotsRequest(betterproto.Message):
    """
    Запрос на расчет количества доступных для покупки/продажи лотов. Если не
    указывать цену инструмента, то расчет произведется по текущум ценам в
    стакане: по лучшему предложению для покупки и по лучшему спросу для
    продажи.
    """

    account_id: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)
    price: "Quotation" = betterproto.message_field(3)


@dataclass
class GetMaxLotsResponse(betterproto.Message):
    """Результат количество доступных для покупки/продажи лотов"""

    currency: str = betterproto.string_field(1)
    buy_limits: "GetMaxLotsResponseBuyLimitsView" = betterproto.message_field(2)
    buy_margin_limits: "GetMaxLotsResponseBuyLimitsView" = betterproto.message_field(3)
    sell_limits: "GetMaxLotsResponseSellLimitsView" = betterproto.message_field(4)
    sell_margin_limits: "GetMaxLotsResponseSellLimitsView" = betterproto.message_field(
        5
    )


@dataclass
class GetMaxLotsResponseBuyLimitsView(betterproto.Message):
    buy_money_amount: "Quotation" = betterproto.message_field(1)
    buy_max_lots: int = betterproto.int64_field(2)
    buy_max_market_lots: int = betterproto.int64_field(3)


@dataclass
class GetMaxLotsResponseSellLimitsView(betterproto.Message):
    sell_max_lots: int = betterproto.int64_field(1)


@dataclass
class GetOrderPriceRequest(betterproto.Message):
    """Запрос получения предварительной стоимости заявки"""

    account_id: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)
    price: "Quotation" = betterproto.message_field(3)
    direction: "OrderDirection" = betterproto.enum_field(12)
    quantity: int = betterproto.int64_field(13)


@dataclass
class GetOrderPriceResponse(betterproto.Message):
    """Предварительная стоимость заявки"""

    total_order_amount: "MoneyValue" = betterproto.message_field(1)
    initial_order_amount: "MoneyValue" = betterproto.message_field(5)
    lots_requested: int = betterproto.int64_field(3)
    executed_commission: "MoneyValue" = betterproto.message_field(7)
    executed_commission_rub: "MoneyValue" = betterproto.message_field(8)
    service_commission: "MoneyValue" = betterproto.message_field(9)
    deal_commission: "MoneyValue" = betterproto.message_field(10)
    extra_bond: "GetOrderPriceResponseExtraBond" = betterproto.message_field(
        12, group="instrument_extra"
    )
    extra_future: "GetOrderPriceResponseExtraFuture" = betterproto.message_field(
        13, group="instrument_extra"
    )


@dataclass
class GetOrderPriceResponseExtraBond(betterproto.Message):
    aci_value: "MoneyValue" = betterproto.message_field(2)
    nominal_conversion_rate: "Quotation" = betterproto.message_field(3)


@dataclass
class GetOrderPriceResponseExtraFuture(betterproto.Message):
    initial_margin: "MoneyValue" = betterproto.message_field(2)


@dataclass
class OrderStateStreamRequest(betterproto.Message):
    """Запрос установки стрим-соединения торговых поручений"""

    accounts: List[str] = betterproto.string_field(1)
    ping_delay_millis: int = betterproto.int32_field(15)


@dataclass
class OrderStateStreamResponse(betterproto.Message):
    """Информация по заявкам"""

    order_state: "OrderStateStreamResponseOrderState" = betterproto.message_field(
        1, group="payload"
    )
    ping: "Ping" = betterproto.message_field(2, group="payload")
    subscription: "OrderStateStreamResponseSubscriptionResponse" = (
        betterproto.message_field(3, group="payload")
    )


@dataclass
class OrderStateStreamResponseSubscriptionResponse(betterproto.Message):
    tracking_id: str = betterproto.string_field(1)
    status: "ResultSubscriptionStatus" = betterproto.enum_field(2)
    stream_id: str = betterproto.string_field(4)
    accounts: List[str] = betterproto.string_field(5)
    error: "ErrorDetail" = betterproto.message_field(7)


@dataclass
class OrderStateStreamResponseOrderState(betterproto.Message):
    """Заявка"""

    order_id: str = betterproto.string_field(1)
    order_request_id: str = betterproto.string_field(2)
    client_code: str = betterproto.string_field(3)
    created_at: datetime = betterproto.message_field(4)
    execution_report_status: "OrderExecutionReportStatus" = betterproto.enum_field(5)
    status_info: "OrderStateStreamResponseStatusCauseInfo" = betterproto.enum_field(6)
    ticker: str = betterproto.string_field(7)
    class_code: str = betterproto.string_field(8)
    lot_size: int = betterproto.int32_field(9)
    direction: "OrderDirection" = betterproto.enum_field(10)
    time_in_force: "TimeInForceType" = betterproto.enum_field(11)
    order_type: "OrderType" = betterproto.enum_field(12)
    account_id: str = betterproto.string_field(13)
    initial_order_price: "MoneyValue" = betterproto.message_field(22)
    order_price: "MoneyValue" = betterproto.message_field(23)
    amount: "MoneyValue" = betterproto.message_field(24)
    executed_order_price: "MoneyValue" = betterproto.message_field(25)
    currency: str = betterproto.string_field(26)
    lots_requested: int = betterproto.int64_field(27)
    lots_executed: int = betterproto.int64_field(28)
    lots_left: int = betterproto.int64_field(29)
    lots_cancelled: int = betterproto.int64_field(30)
    marker: "OrderStateStreamResponseMarkerType" = betterproto.enum_field(31)
    trades: List["OrderTrade"] = betterproto.message_field(33)
    completion_time: datetime = betterproto.message_field(35)
    exchange: str = betterproto.string_field(36)
    instrument_uid: str = betterproto.string_field(41)


@dataclass
class GetAccountsRequest(betterproto.Message):
    """Запрос получения счетов пользователя."""

    pass


@dataclass
class GetAccountsResponse(betterproto.Message):
    """Список счетов пользователя."""

    # Массив счетов клиента.
    accounts: List["Account"] = betterproto.message_field(1)


@dataclass
class Account(betterproto.Message):
    """Информация о счёте."""

    # Идентификатор счёта.
    id: str = betterproto.string_field(1)
    # Тип счёта.
    type: "AccountType" = betterproto.enum_field(2)
    # Название счёта.
    name: str = betterproto.string_field(3)
    # Статус счёта.
    status: "AccountStatus" = betterproto.enum_field(4)
    # Дата открытия счёта в часовом поясе UTC.
    opened_date: datetime = betterproto.message_field(5)
    # Дата закрытия счёта в часовом поясе UTC.
    closed_date: datetime = betterproto.message_field(6)
    # Уровень доступа к текущему счёту (определяется токеном).
    access_level: "AccessLevel" = betterproto.enum_field(7)


@dataclass
class GetMarginAttributesRequest(betterproto.Message):
    """Запрос маржинальных показателей по счёту."""

    # Идентификатор счёта пользователя.
    account_id: str = betterproto.string_field(1)


@dataclass
class GetMarginAttributesResponse(betterproto.Message):
    """Маржинальные показатели по счёту."""

    # Ликвидная стоимость портфеля. [Подробнее про ликвидный
    # портфель](https://help.tinkoff.ru/margin-trade/short/liquid-portfolio/).
    liquid_portfolio: "MoneyValue" = betterproto.message_field(1)
    # Начальная маржа — начальное обеспечение для совершения новой сделки.
    # [Подробнее про начальную и минимальную
    # маржу](https://help.tinkoff.ru/margin-trade/short/initial-and-maintenance-
    # margin/).
    starting_margin: "MoneyValue" = betterproto.message_field(2)
    # Минимальная маржа — это минимальное обеспечение для поддержания позиции,
    # которую вы уже открыли. [Подробнее про начальную и минимальную
    # маржу](https://help.tinkoff.ru/margin-trade/short/initial-and-maintenance-
    # margin/).
    minimal_margin: "MoneyValue" = betterproto.message_field(3)
    # Уровень достаточности средств. Соотношение стоимости ликвидного портфеля к
    # начальной марже.
    funds_sufficiency_level: "Quotation" = betterproto.message_field(4)
    # Объем недостающих средств. Разница между стартовой маржой и ликвидной
    # стоимости портфеля.
    amount_of_missing_funds: "MoneyValue" = betterproto.message_field(5)
    # Скорректированная маржа. Начальная маржа, в которой плановые позиции
    # рассчитываются с учётом активных заявок на покупку позиций лонг или продажу
    # позиций шорт.
    corrected_margin: "MoneyValue" = betterproto.message_field(6)


@dataclass
class GetUserTariffRequest(betterproto.Message):
    """Запрос текущих лимитов пользователя."""

    pass


@dataclass
class GetUserTariffResponse(betterproto.Message):
    """Текущие лимиты пользователя."""

    unary_limits: List["UnaryLimit"] = betterproto.message_field(1)
    stream_limits: List["StreamLimit"] = betterproto.message_field(2)


@dataclass
class UnaryLimit(betterproto.Message):
    """Лимит unary-методов."""

    limit_per_minute: int = betterproto.int32_field(1)
    methods: List[str] = betterproto.string_field(2)


@dataclass
class StreamLimit(betterproto.Message):
    """Лимит stream-соединений."""

    limit: int = betterproto.int32_field(1)
    streams: List[str] = betterproto.string_field(2)
    open: int = betterproto.int32_field(3)


@dataclass
class GetInfoRequest(betterproto.Message):
    """Запрос информации о пользователе."""

    pass


@dataclass
class GetInfoResponse(betterproto.Message):
    """Информация о пользователе."""

    prem_status: bool = betterproto.bool_field(1)
    qual_status: bool = betterproto.bool_field(2)
    qualified_for_work_with: List[str] = betterproto.string_field(3)
    tariff: str = betterproto.string_field(4)


@dataclass
class OpenSandboxAccountRequest(betterproto.Message):
    """Запрос открытия счёта в песочнице."""

    name: str = betterproto.string_field(1)


@dataclass
class OpenSandboxAccountResponse(betterproto.Message):
    """Номер открытого счёта в песочнице."""

    account_id: str = betterproto.string_field(1)


@dataclass
class CloseSandboxAccountRequest(betterproto.Message):
    """Запрос закрытия счёта в песочнице."""

    account_id: str = betterproto.string_field(1)


@dataclass
class CloseSandboxAccountResponse(betterproto.Message):
    """Результат закрытия счёта в песочнице."""

    pass


@dataclass
class SandboxPayInRequest(betterproto.Message):
    """Запрос пополнения счёта в песочнице."""

    account_id: str = betterproto.string_field(1)
    amount: "MoneyValue" = betterproto.message_field(2)


@dataclass
class SandboxPayInResponse(betterproto.Message):
    """Результат пополнения счёта, текущий баланс."""

    balance: "MoneyValue" = betterproto.message_field(1)


@dataclass
class PostStopOrderRequest(betterproto.Message):
    """Запрос выставления стоп-заявки."""

    figi: str = betterproto.string_field(1)
    quantity: int = betterproto.int64_field(2)
    price: "Quotation" = betterproto.message_field(3)
    stop_price: "Quotation" = betterproto.message_field(4)
    direction: "StopOrderDirection" = betterproto.enum_field(5)
    account_id: str = betterproto.string_field(6)
    expiration_type: "StopOrderExpirationType" = betterproto.enum_field(7)
    stop_order_type: "StopOrderType" = betterproto.enum_field(8)
    expire_date: datetime = betterproto.message_field(9)
    instrument_id: str = betterproto.string_field(10)
    exchange_order_type: "ExchangeOrderType" = betterproto.enum_field(11)
    take_profit_type: "TakeProfitType" = betterproto.enum_field(12)
    trailing_data: "PostStopOrderRequestTrailingData" = betterproto.message_field(13)
    price_type: "PriceType" = betterproto.enum_field(14)
    order_id: str = betterproto.string_field(15)


@dataclass
class PostStopOrderRequestTrailingData(betterproto.Message):
    indent: "Quotation" = betterproto.message_field(1)
    indent_type: "TrailingValueType" = betterproto.enum_field(2)
    spread: "Quotation" = betterproto.message_field(3)
    spread_type: "TrailingValueType" = betterproto.enum_field(4)


@dataclass
class PostStopOrderResponse(betterproto.Message):
    """Результат выставления стоп-заявки."""

    stop_order_id: str = betterproto.string_field(1)
    order_request_id: str = betterproto.string_field(2)
    response_metadata: "ResponseMetadata" = betterproto.message_field(254)


@dataclass
class GetStopOrdersRequest(betterproto.Message):
    """Запрос получения списка активных стоп-заявок."""

    account_id: str = betterproto.string_field(1)
    status: "StopOrderStatusOption" = betterproto.enum_field(2)
    from_: datetime = betterproto.message_field(3)
    to: datetime = betterproto.message_field(4)


@dataclass
class GetStopOrdersResponse(betterproto.Message):
    """Список активных стоп-заявок."""

    stop_orders: List["StopOrder"] = betterproto.message_field(1)


@dataclass
class CancelStopOrderRequest(betterproto.Message):
    """Запрос отмены выставленной стоп-заявки."""

    account_id: str = betterproto.string_field(1)
    stop_order_id: str = betterproto.string_field(2)


@dataclass
class CancelStopOrderResponse(betterproto.Message):
    """Результат отмены выставленной стоп-заявки."""

    time: datetime = betterproto.message_field(1)


@dataclass
class StopOrder(betterproto.Message):
    """Информация о стоп-заявке."""

    stop_order_id: str = betterproto.string_field(1)
    lots_requested: int = betterproto.int64_field(2)
    figi: str = betterproto.string_field(3)
    direction: "StopOrderDirection" = betterproto.enum_field(4)
    currency: str = betterproto.string_field(5)
    order_type: "StopOrderType" = betterproto.enum_field(6)
    create_date: datetime = betterproto.message_field(7)
    activation_date_time: datetime = betterproto.message_field(8)
    expiration_time: datetime = betterproto.message_field(9)
    price: "MoneyValue" = betterproto.message_field(10)
    stop_price: "MoneyValue" = betterproto.message_field(11)
    instrument_uid: str = betterproto.string_field(12)
    take_profit_type: "TakeProfitType" = betterproto.enum_field(13)
    trailing_data: "StopOrderTrailingData" = betterproto.message_field(14)
    status: "StopOrderStatusOption" = betterproto.enum_field(15)
    exchange_order_type: "ExchangeOrderType" = betterproto.enum_field(16)


@dataclass
class StopOrderTrailingData(betterproto.Message):
    indent: "Quotation" = betterproto.message_field(1)
    indent_type: "TrailingValueType" = betterproto.enum_field(2)
    spread: "Quotation" = betterproto.message_field(3)
    spread_type: "TrailingValueType" = betterproto.enum_field(4)
    status: "TrailingStopStatus" = betterproto.enum_field(5)
    price: "Quotation" = betterproto.message_field(7)
    extr: "Quotation" = betterproto.message_field(8)


class InstrumentsServiceStub(betterproto.ServiceStub):
    async def trading_schedules(
        self,
        *,
        exchange: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
    ) -> TradingSchedulesResponse:
        """Получить расписания торгов торговых площадок."""

        request = TradingSchedulesRequest()
        request.exchange = exchange
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules",
            request,
            TradingSchedulesResponse,
        )

    async def bond_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> BondResponse:
        """Получить облигации по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy",
            request,
            BondResponse,
        )

    async def bonds(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> BondsResponse:
        """Получить список облигаций."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds",
            request,
            BondsResponse,
        )

    async def get_bond_coupons(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetBondCouponsResponse:
        """Получить график выплат купонов по облигации."""

        request = GetBondCouponsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons",
            request,
            GetBondCouponsResponse,
        )

    async def get_bond_events(
        self,
        *,
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
        type: "GetBondEventsRequestEventType" = 0,
    ) -> GetBondEventsResponse:
        """Получить события по облигации"""

        request = GetBondEventsRequest()
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id
        request.type = type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondEvents",
            request,
            GetBondEventsResponse,
        )

    async def currency_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> CurrencyResponse:
        """Получить валюту по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy",
            request,
            CurrencyResponse,
        )

    async def currencies(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> CurrenciesResponse:
        """Получить список валют."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies",
            request,
            CurrenciesResponse,
        )

    async def etf_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> EtfResponse:
        """Получить инвестиционный фонд по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy",
            request,
            EtfResponse,
        )

    async def etfs(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> EtfsResponse:
        """Получить список инвестиционных фондов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs",
            request,
            EtfsResponse,
        )

    async def future_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> FutureResponse:
        """Получить фьючерс по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy",
            request,
            FutureResponse,
        )

    async def futures(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> FuturesResponse:
        """Получить список фьючерсов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures",
            request,
            FuturesResponse,
        )

    async def option_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> OptionResponse:
        """Получить опцион по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy",
            request,
            OptionResponse,
        )

    async def options(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> OptionsResponse:
        """Deprecated Получить списка опционов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options",
            request,
            OptionsResponse,
        )

    async def options_by(
        self, *, basic_asset_uid: str = "", basic_asset_position_uid: str = ""
    ) -> OptionsResponse:
        """Получить список опционов."""

        request = FilterOptionsRequest()
        request.basic_asset_uid = basic_asset_uid
        request.basic_asset_position_uid = basic_asset_position_uid

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionsBy",
            request,
            OptionsResponse,
        )

    async def share_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> ShareResponse:
        """Получить акцию по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy",
            request,
            ShareResponse,
        )

    async def shares(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> SharesResponse:
        """Получить список акций."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares",
            request,
            SharesResponse,
        )

    async def indicatives(self) -> IndicativesResponse:
        """Получить индикативные инструменты — индексы, товары и другие."""

        request = IndicativesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Indicatives",
            request,
            IndicativesResponse,
        )

    async def get_accrued_interests(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetAccruedInterestsResponse:
        """Получить накопленный купонный доход по облигации."""

        request = GetAccruedInterestsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
            request,
            GetAccruedInterestsResponse,
        )

    async def get_futures_margin(
        self, *, figi: str = "", instrument_id: str = ""
    ) -> GetFuturesMarginResponse:
        """Получить размера гарантийного обеспечения по фьючерсам."""

        request = GetFuturesMarginRequest()
        request.figi = figi
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
            request,
            GetFuturesMarginResponse,
        )

    async def get_instrument_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> InstrumentResponse:
        """Получить основную информацию об инструменте."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
            request,
            InstrumentResponse,
        )

    async def get_dividends(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetDividendsResponse:
        """Получить события выплаты дивидендов по инструменту."""

        request = GetDividendsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends",
            request,
            GetDividendsResponse,
        )

    async def get_asset_by(self, *, id: str = "") -> AssetResponse:
        """Получить актив по его идентификатору."""

        request = AssetRequest()
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy",
            request,
            AssetResponse,
        )

    async def get_assets(
        self, *, instrument_type: "InstrumentType" = 0
    ) -> AssetsResponse:
        """
        Получить список активов. Метод работает для всех инструментов, кроме
        срочных — опционов и фьючерсов.
        """

        request = AssetsRequest()
        request.instrument_type = instrument_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets",
            request,
            AssetsResponse,
        )

    async def get_favorites(self) -> GetFavoritesResponse:
        """Получить список избранных инструментов."""

        request = GetFavoritesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites",
            request,
            GetFavoritesResponse,
        )

    async def edit_favorites(
        self,
        *,
        instruments: List["EditFavoritesRequestInstrument"] = [],
        action_type: "EditFavoritesActionType" = 0,
    ) -> EditFavoritesResponse:
        """Отредактировать список избранных инструментов."""

        request = EditFavoritesRequest()
        if instruments is not None:
            request.instruments = instruments
        request.action_type = action_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites",
            request,
            EditFavoritesResponse,
        )

    async def get_countries(self) -> GetCountriesResponse:
        """Получить список стран."""

        request = GetCountriesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries",
            request,
            GetCountriesResponse,
        )

    async def find_instrument(
        self,
        *,
        query: str = "",
        instrument_kind: "InstrumentType" = 0,
        api_trade_available_flag: bool = False,
    ) -> FindInstrumentResponse:
        """Найти инструмент."""

        request = FindInstrumentRequest()
        request.query = query
        request.instrument_kind = instrument_kind
        request.api_trade_available_flag = api_trade_available_flag

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument",
            request,
            FindInstrumentResponse,
        )

    async def get_brands(self, *, paging: Optional["Page"] = None) -> GetBrandsResponse:
        """Получить список брендов."""

        request = GetBrandsRequest()
        if paging is not None:
            request.paging = paging

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands",
            request,
            GetBrandsResponse,
        )

    async def get_brand_by(self, *, id: str = "") -> Brand:
        """Получить бренд по его идентификатору."""

        request = GetBrandRequest()
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy",
            request,
            Brand,
        )

    async def get_asset_fundamentals(
        self, *, assets: List[str] = []
    ) -> GetAssetFundamentalsResponse:
        """Получить фундаментальные показатели по активу."""

        request = GetAssetFundamentalsRequest()
        request.assets = assets

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetFundamentals",
            request,
            GetAssetFundamentalsResponse,
        )

    async def get_asset_reports(
        self,
        *,
        instrument_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
    ) -> GetAssetReportsResponse:
        """Получить расписания выхода отчётностей эмитентов."""

        request = GetAssetReportsRequest()
        request.instrument_id = instrument_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetReports",
            request,
            GetAssetReportsResponse,
        )

    async def get_consensus_forecasts(
        self, *, paging: Optional["Page"] = None
    ) -> GetConsensusForecastsResponse:
        """Получить мнения аналитиков по инструменту."""

        request = GetConsensusForecastsRequest()
        if paging is not None:
            request.paging = paging

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetConsensusForecasts",
            request,
            GetConsensusForecastsResponse,
        )

    async def get_forecast_by(self, *, instrument_id: str = "") -> GetForecastResponse:
        """Получить прогнозов инвестдомов по инструменту."""

        request = GetForecastRequest()
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetForecastBy",
            request,
            GetForecastResponse,
        )


class MarketDataServiceStub(betterproto.ServiceStub):
    async def get_candles(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        interval: "CandleInterval" = 0,
        instrument_id: str = "",
        candle_source_type: "GetCandlesRequestCandleSource" = 0,
    ) -> GetCandlesResponse:
        """Метод запроса исторических свечей по инструменту."""

        request = GetCandlesRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.interval = interval
        request.instrument_id = instrument_id
        request.candle_source_type = candle_source_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles",
            request,
            GetCandlesResponse,
        )

    async def get_last_prices(
        self, *, figi: List[str] = [], instrument_id: List[str] = []
    ) -> GetLastPricesResponse:
        """Метод запроса цен последних сделок по инструментам."""

        request = GetLastPricesRequest()
        request.figi = figi
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices",
            request,
            GetLastPricesResponse,
        )

    async def get_order_book(
        self, *, figi: str = "", depth: int = 0, instrument_id: str = ""
    ) -> GetOrderBookResponse:
        """Метод получения стакана по инструменту."""

        request = GetOrderBookRequest()
        request.figi = figi
        request.depth = depth
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook",
            request,
            GetOrderBookResponse,
        )

    async def get_trading_status(
        self, *, figi: str = "", instrument_id: str = ""
    ) -> GetTradingStatusResponse:
        """Метод запроса статуса торгов по инструментам."""

        request = GetTradingStatusRequest()
        request.figi = figi
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus",
            request,
            GetTradingStatusResponse,
        )

    async def get_trading_statuses(
        self, *, instrument_id: List[str] = []
    ) -> GetTradingStatusesResponse:
        """Метод запроса статуса торгов по инструментам."""

        request = GetTradingStatusesRequest()
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatuses",
            request,
            GetTradingStatusesResponse,
        )

    async def get_last_trades(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetLastTradesResponse:
        """Метод запроса обезличенных сделок за последний час."""

        request = GetLastTradesRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades",
            request,
            GetLastTradesResponse,
        )

    async def get_close_prices(
        self, *, instruments: List["InstrumentClosePriceRequest"] = []
    ) -> GetClosePricesResponse:
        """Метод запроса цен закрытия торговой сессии по инструментам."""

        request = GetClosePricesRequest()
        if instruments is not None:
            request.instruments = instruments

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetClosePrices",
            request,
            GetClosePricesResponse,
        )

    async def get_tech_analysis(
        self,
        *,
        indicator_type: "GetTechAnalysisRequestIndicatorType" = 0,
        instrument_uid: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        interval: "GetTechAnalysisRequestIndicatorInterval" = 0,
        type_of_price: "GetTechAnalysisRequestTypeOfPrice" = 0,
        length: int = 0,
        deviation: Optional["GetTechAnalysisRequestDeviation"] = None,
        smoothing: Optional["GetTechAnalysisRequestSmoothing"] = None,
    ) -> GetTechAnalysisResponse:
        """Метод получения технических индикаторов по инструменту"""

        request = GetTechAnalysisRequest()
        request.indicator_type = indicator_type
        request.instrument_uid = instrument_uid
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.interval = interval
        request.type_of_price = type_of_price
        request.length = length
        if deviation is not None:
            request.deviation = deviation
        if smoothing is not None:
            request.smoothing = smoothing

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTechAnalysis",
            request,
            GetTechAnalysisResponse,
        )


class MarketDataStreamServiceStub(betterproto.ServiceStub):
    async def market_data_server_side_stream(
        self,
        *,
        subscribe_candles_request: Optional["SubscribeCandlesRequest"] = None,
        subscribe_order_book_request: Optional["SubscribeOrderBookRequest"] = None,
        subscribe_trades_request: Optional["SubscribeTradesRequest"] = None,
        subscribe_info_request: Optional["SubscribeInfoRequest"] = None,
        subscribe_last_price_request: Optional["SubscribeLastPriceRequest"] = None,
    ) -> AsyncGenerator[MarketDataResponse, None]:
        """Server-side стрим предоставления биржевой информации."""

        request = MarketDataServerSideStreamRequest()
        if subscribe_candles_request is not None:
            request.subscribe_candles_request = subscribe_candles_request
        if subscribe_order_book_request is not None:
            request.subscribe_order_book_request = subscribe_order_book_request
        if subscribe_trades_request is not None:
            request.subscribe_trades_request = subscribe_trades_request
        if subscribe_info_request is not None:
            request.subscribe_info_request = subscribe_info_request
        if subscribe_last_price_request is not None:
            request.subscribe_last_price_request = subscribe_last_price_request

        async for response in self._unary_stream(
            "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataServerSideStream",
            request,
            MarketDataResponse,
        ):
            yield response


class OperationsServiceStub(betterproto.ServiceStub):
    async def get_operations(
        self,
        *,
        account_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        state: "OperationState" = 0,
        figi: str = "",
    ) -> OperationsResponse:
        """
        Метод получения списка операций по счёту.При работе с данным методом
        необходимо учитывать [особенности
        взаимодействия](/investAPI/operations_problems) с данным методом.
        """

        request = OperationsRequest()
        request.account_id = account_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.state = state
        request.figi = figi

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations",
            request,
            OperationsResponse,
        )

    async def get_portfolio(
        self, *, account_id: str = "", currency: "PortfolioRequestCurrencyRequest" = 0
    ) -> PortfolioResponse:
        """Метод получения портфеля по счёту."""

        request = PortfolioRequest()
        request.account_id = account_id
        request.currency = currency

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio",
            request,
            PortfolioResponse,
        )

    async def get_positions(self, *, account_id: str = "") -> PositionsResponse:
        """Метод получения списка позиций по счёту."""

        request = PositionsRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions",
            request,
            PositionsResponse,
        )

    async def get_withdraw_limits(
        self, *, account_id: str = ""
    ) -> WithdrawLimitsResponse:
        """Метод получения доступного остатка для вывода средств."""

        request = WithdrawLimitsRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits",
            request,
            WithdrawLimitsResponse,
        )

    async def get_broker_report(
        self,
        *,
        generate_broker_report_request: Optional["GenerateBrokerReportRequest"] = None,
        get_broker_report_request: Optional["GetBrokerReportRequest"] = None,
    ) -> BrokerReportResponse:
        """Метод получения брокерского отчёта."""

        request = BrokerReportRequest()
        if generate_broker_report_request is not None:
            request.generate_broker_report_request = generate_broker_report_request
        if get_broker_report_request is not None:
            request.get_broker_report_request = get_broker_report_request

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport",
            request,
            BrokerReportResponse,
        )

    async def get_dividends_foreign_issuer(
        self,
        *,
        generate_div_foreign_issuer_report: Optional[
            "GenerateDividendsForeignIssuerReportRequest"
        ] = None,
        get_div_foreign_issuer_report: Optional[
            "GetDividendsForeignIssuerReportRequest"
        ] = None,
    ) -> GetDividendsForeignIssuerResponse:
        """Метод получения отчёта "Справка о доходах за пределами РФ"."""

        request = GetDividendsForeignIssuerRequest()
        if generate_div_foreign_issuer_report is not None:
            request.generate_div_foreign_issuer_report = (
                generate_div_foreign_issuer_report
            )
        if get_div_foreign_issuer_report is not None:
            request.get_div_foreign_issuer_report = get_div_foreign_issuer_report

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer",
            request,
            GetDividendsForeignIssuerResponse,
        )

    async def get_operations_by_cursor(
        self,
        *,
        account_id: str = "",
        instrument_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        cursor: str = "",
        limit: int = 0,
        operation_types: List["OperationType"] = [],
        state: "OperationState" = 0,
        without_commissions: bool = False,
        without_trades: bool = False,
        without_overnights: bool = False,
    ) -> GetOperationsByCursorResponse:
        """
        Метод получения списка операций по счёту с пагинацией. При работе с
        данным методом необходимо учитывать [особенности
        взаимодействия](/investAPI/operations_problems) с данным методом.
        """

        request = GetOperationsByCursorRequest()
        request.account_id = account_id
        request.instrument_id = instrument_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.cursor = cursor
        request.limit = limit
        request.operation_types = operation_types
        request.state = state
        request.without_commissions = without_commissions
        request.without_trades = without_trades
        request.without_overnights = without_overnights

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor",
            request,
            GetOperationsByCursorResponse,
        )


class OperationsStreamServiceStub(betterproto.ServiceStub):
    async def portfolio_stream(
        self, *, accounts: List[str] = []
    ) -> AsyncGenerator[PortfolioStreamResponse, None]:
        """Server-side stream обновлений портфеля"""

        request = PortfolioStreamRequest()
        request.accounts = accounts

        async for response in self._unary_stream(
            "/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream",
            request,
            PortfolioStreamResponse,
        ):
            yield response

    async def positions_stream(
        self, *, accounts: List[str] = []
    ) -> AsyncGenerator[PositionsStreamResponse, None]:
        """
        Server-side stream обновлений информации по изменению позиций портфеля
        """

        request = PositionsStreamRequest()
        request.accounts = accounts

        async for response in self._unary_stream(
            "/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream",
            request,
            PositionsStreamResponse,
        ):
            yield response


class OrdersStreamServiceStub(betterproto.ServiceStub):
    async def trades_stream(
        self, *, accounts: List[str] = []
    ) -> AsyncGenerator[TradesStreamResponse, None]:
        """Stream сделок пользователя"""

        request = TradesStreamRequest()
        request.accounts = accounts

        async for response in self._unary_stream(
            "/tinkoff.public.invest.api.contract.v1.OrdersStreamService/TradesStream",
            request,
            TradesStreamResponse,
        ):
            yield response

    async def order_state_stream(
        self, *, accounts: List[str] = [], ping_delay_millis: int = 0
    ) -> AsyncGenerator[OrderStateStreamResponse, None]:
        """
        Stream поручений пользователя. Перед работой прочитайте [статью](https:
        //russianinvestments.github.io/investAPI/orders_state_stream/).
        """

        request = OrderStateStreamRequest()
        request.accounts = accounts
        request.ping_delay_millis = ping_delay_millis

        async for response in self._unary_stream(
            "/tinkoff.public.invest.api.contract.v1.OrdersStreamService/OrderStateStream",
            request,
            OrderStateStreamResponse,
        ):
            yield response


class OrdersServiceStub(betterproto.ServiceStub):
    async def post_order(
        self,
        *,
        figi: str = "",
        quantity: int = 0,
        price: Optional["Quotation"] = None,
        direction: "OrderDirection" = 0,
        account_id: str = "",
        order_type: "OrderType" = 0,
        order_id: str = "",
        instrument_id: str = "",
        time_in_force: "TimeInForceType" = 0,
        price_type: "PriceType" = 0,
    ) -> PostOrderResponse:
        """Метод выставления заявки."""

        request = PostOrderRequest()
        request.figi = figi
        request.quantity = quantity
        if price is not None:
            request.price = price
        request.direction = direction
        request.account_id = account_id
        request.order_type = order_type
        request.order_id = order_id
        request.instrument_id = instrument_id
        request.time_in_force = time_in_force
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/PostOrder",
            request,
            PostOrderResponse,
        )

    async def cancel_order(
        self, *, account_id: str = "", order_id: str = ""
    ) -> CancelOrderResponse:
        """Метод отмены биржевой заявки."""

        request = CancelOrderRequest()
        request.account_id = account_id
        request.order_id = order_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/CancelOrder",
            request,
            CancelOrderResponse,
        )

    async def get_order_state(
        self, *, account_id: str = "", order_id: str = "", price_type: "PriceType" = 0
    ) -> OrderState:
        """Метод получения статуса торгового поручения."""

        request = GetOrderStateRequest()
        request.account_id = account_id
        request.order_id = order_id
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/GetOrderState",
            request,
            OrderState,
        )

    async def get_orders(self, *, account_id: str = "") -> GetOrdersResponse:
        """Метод получения списка активных заявок по счёту."""

        request = GetOrdersRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/GetOrders",
            request,
            GetOrdersResponse,
        )

    async def replace_order(
        self,
        *,
        account_id: str = "",
        order_id: str = "",
        idempotency_key: str = "",
        quantity: int = 0,
        price: Optional["Quotation"] = None,
        price_type: "PriceType" = 0,
    ) -> PostOrderResponse:
        """Метод изменения выставленной заявки."""

        request = ReplaceOrderRequest()
        request.account_id = account_id
        request.order_id = order_id
        request.idempotency_key = idempotency_key
        request.quantity = quantity
        if price is not None:
            request.price = price
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/ReplaceOrder",
            request,
            PostOrderResponse,
        )

    async def get_max_lots(
        self,
        *,
        account_id: str = "",
        instrument_id: str = "",
        price: Optional["Quotation"] = None,
    ) -> GetMaxLotsResponse:
        """расчет количества доступных для покупки/продажи лотов"""

        request = GetMaxLotsRequest()
        request.account_id = account_id
        request.instrument_id = instrument_id
        if price is not None:
            request.price = price

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/GetMaxLots",
            request,
            GetMaxLotsResponse,
        )

    async def get_order_price(
        self,
        *,
        account_id: str = "",
        instrument_id: str = "",
        price: Optional["Quotation"] = None,
        direction: "OrderDirection" = 0,
        quantity: int = 0,
    ) -> GetOrderPriceResponse:
        """Метод получения предварительной стоимости для лимитной заявки"""

        request = GetOrderPriceRequest()
        request.account_id = account_id
        request.instrument_id = instrument_id
        if price is not None:
            request.price = price
        request.direction = direction
        request.quantity = quantity

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.OrdersService/GetOrderPrice",
            request,
            GetOrderPriceResponse,
        )


class UsersServiceStub(betterproto.ServiceStub):
    async def get_accounts(self) -> GetAccountsResponse:
        """Получить счета пользователя."""

        request = GetAccountsRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts",
            request,
            GetAccountsResponse,
        )

    async def get_margin_attributes(
        self, *, account_id: str = ""
    ) -> GetMarginAttributesResponse:
        """Рассчитать маржинальные показатели по счёту."""

        request = GetMarginAttributesRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.UsersService/GetMarginAttributes",
            request,
            GetMarginAttributesResponse,
        )

    async def get_user_tariff(self) -> GetUserTariffResponse:
        """Запросить тариф пользователя."""

        request = GetUserTariffRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.UsersService/GetUserTariff",
            request,
            GetUserTariffResponse,
        )

    async def get_info(self) -> GetInfoResponse:
        """Получить информацию о пользователе."""

        request = GetInfoRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.UsersService/GetInfo",
            request,
            GetInfoResponse,
        )


class SandboxServiceStub(betterproto.ServiceStub):
    async def open_sandbox_account(
        self, *, name: str = ""
    ) -> OpenSandboxAccountResponse:
        """Зарегистрировать счёт."""

        request = OpenSandboxAccountRequest()
        request.name = name

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount",
            request,
            OpenSandboxAccountResponse,
        )

    async def get_sandbox_accounts(self) -> GetAccountsResponse:
        """Получить счета."""

        request = GetAccountsRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts",
            request,
            GetAccountsResponse,
        )

    async def close_sandbox_account(
        self, *, account_id: str = ""
    ) -> CloseSandboxAccountResponse:
        """Закрыть счёт."""

        request = CloseSandboxAccountRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount",
            request,
            CloseSandboxAccountResponse,
        )

    async def post_sandbox_order(
        self,
        *,
        figi: str = "",
        quantity: int = 0,
        price: Optional["Quotation"] = None,
        direction: "OrderDirection" = 0,
        account_id: str = "",
        order_type: "OrderType" = 0,
        order_id: str = "",
        instrument_id: str = "",
        time_in_force: "TimeInForceType" = 0,
        price_type: "PriceType" = 0,
    ) -> PostOrderResponse:
        """Выставить торговое поручение."""

        request = PostOrderRequest()
        request.figi = figi
        request.quantity = quantity
        if price is not None:
            request.price = price
        request.direction = direction
        request.account_id = account_id
        request.order_type = order_type
        request.order_id = order_id
        request.instrument_id = instrument_id
        request.time_in_force = time_in_force
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder",
            request,
            PostOrderResponse,
        )

    async def replace_sandbox_order(
        self,
        *,
        account_id: str = "",
        order_id: str = "",
        idempotency_key: str = "",
        quantity: int = 0,
        price: Optional["Quotation"] = None,
        price_type: "PriceType" = 0,
    ) -> PostOrderResponse:
        """Изменить выставленную заявку."""

        request = ReplaceOrderRequest()
        request.account_id = account_id
        request.order_id = order_id
        request.idempotency_key = idempotency_key
        request.quantity = quantity
        if price is not None:
            request.price = price
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder",
            request,
            PostOrderResponse,
        )

    async def get_sandbox_orders(self, *, account_id: str = "") -> GetOrdersResponse:
        """Получить список активных заявок по счёту."""

        request = GetOrdersRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders",
            request,
            GetOrdersResponse,
        )

    async def cancel_sandbox_order(
        self, *, account_id: str = "", order_id: str = ""
    ) -> CancelOrderResponse:
        """Отменить торговое поручение."""

        request = CancelOrderRequest()
        request.account_id = account_id
        request.order_id = order_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder",
            request,
            CancelOrderResponse,
        )

    async def get_sandbox_order_state(
        self, *, account_id: str = "", order_id: str = "", price_type: "PriceType" = 0
    ) -> OrderState:
        """
        Поулчить статус заявки в песочнице. Заявки хранятся в таблице 7 дней.
        """

        request = GetOrderStateRequest()
        request.account_id = account_id
        request.order_id = order_id
        request.price_type = price_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState",
            request,
            OrderState,
        )

    async def get_sandbox_positions(self, *, account_id: str = "") -> PositionsResponse:
        """Получить позиции по виртуальному счёту."""

        request = PositionsRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions",
            request,
            PositionsResponse,
        )

    async def get_sandbox_operations(
        self,
        *,
        account_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        state: "OperationState" = 0,
        figi: str = "",
    ) -> OperationsResponse:
        """Получить операции по номеру счёта."""

        request = OperationsRequest()
        request.account_id = account_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.state = state
        request.figi = figi

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations",
            request,
            OperationsResponse,
        )

    async def get_sandbox_operations_by_cursor(
        self,
        *,
        account_id: str = "",
        instrument_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        cursor: str = "",
        limit: int = 0,
        operation_types: List["OperationType"] = [],
        state: "OperationState" = 0,
        without_commissions: bool = False,
        without_trades: bool = False,
        without_overnights: bool = False,
    ) -> GetOperationsByCursorResponse:
        """Получить операции по номеру счёта с пагинацией."""

        request = GetOperationsByCursorRequest()
        request.account_id = account_id
        request.instrument_id = instrument_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.cursor = cursor
        request.limit = limit
        request.operation_types = operation_types
        request.state = state
        request.without_commissions = without_commissions
        request.without_trades = without_trades
        request.without_overnights = without_overnights

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperationsByCursor",
            request,
            GetOperationsByCursorResponse,
        )

    async def get_sandbox_portfolio(
        self, *, account_id: str = "", currency: "PortfolioRequestCurrencyRequest" = 0
    ) -> PortfolioResponse:
        """Получить портфель."""

        request = PortfolioRequest()
        request.account_id = account_id
        request.currency = currency

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio",
            request,
            PortfolioResponse,
        )

    async def sandbox_pay_in(
        self, *, account_id: str = "", amount: Optional["MoneyValue"] = None
    ) -> SandboxPayInResponse:
        """Пополнить счёт."""

        request = SandboxPayInRequest()
        request.account_id = account_id
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn",
            request,
            SandboxPayInResponse,
        )

    async def get_sandbox_withdraw_limits(
        self, *, account_id: str = ""
    ) -> WithdrawLimitsResponse:
        """Получить доступный остаток для вывода средств."""

        request = WithdrawLimitsRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits",
            request,
            WithdrawLimitsResponse,
        )

    async def get_sandbox_max_lots(
        self,
        *,
        account_id: str = "",
        instrument_id: str = "",
        price: Optional["Quotation"] = None,
    ) -> GetMaxLotsResponse:
        """
        Расчёт количества доступных для покупки/продажи лотов в песочнице.
        """

        request = GetMaxLotsRequest()
        request.account_id = account_id
        request.instrument_id = instrument_id
        if price is not None:
            request.price = price

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxMaxLots",
            request,
            GetMaxLotsResponse,
        )


class StopOrdersServiceStub(betterproto.ServiceStub):
    async def post_stop_order(
        self,
        *,
        figi: str = "",
        quantity: int = 0,
        price: Optional["Quotation"] = None,
        stop_price: Optional["Quotation"] = None,
        direction: "StopOrderDirection" = 0,
        account_id: str = "",
        expiration_type: "StopOrderExpirationType" = 0,
        stop_order_type: "StopOrderType" = 0,
        expire_date: Optional[datetime] = None,
        instrument_id: str = "",
        exchange_order_type: "ExchangeOrderType" = 0,
        take_profit_type: "TakeProfitType" = 0,
        trailing_data: Optional["PostStopOrderRequestTrailingData"] = None,
        price_type: "PriceType" = 0,
        order_id: str = "",
    ) -> PostStopOrderResponse:
        """Метод выставления стоп-заявки."""

        request = PostStopOrderRequest()
        request.figi = figi
        request.quantity = quantity
        if price is not None:
            request.price = price
        if stop_price is not None:
            request.stop_price = stop_price
        request.direction = direction
        request.account_id = account_id
        request.expiration_type = expiration_type
        request.stop_order_type = stop_order_type
        if expire_date is not None:
            request.expire_date = expire_date
        request.instrument_id = instrument_id
        request.exchange_order_type = exchange_order_type
        request.take_profit_type = take_profit_type
        if trailing_data is not None:
            request.trailing_data = trailing_data
        request.price_type = price_type
        request.order_id = order_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.StopOrdersService/PostStopOrder",
            request,
            PostStopOrderResponse,
        )

    async def get_stop_orders(
        self,
        *,
        account_id: str = "",
        status: "StopOrderStatusOption" = 0,
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
    ) -> GetStopOrdersResponse:
        """Метод получения списка активных стоп заявок по счёту."""

        request = GetStopOrdersRequest()
        request.account_id = account_id
        request.status = status
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.StopOrdersService/GetStopOrders",
            request,
            GetStopOrdersResponse,
        )

    async def cancel_stop_order(
        self, *, account_id: str = "", stop_order_id: str = ""
    ) -> CancelStopOrderResponse:
        """Метод отмены стоп-заявки."""

        request = CancelStopOrderRequest()
        request.account_id = account_id
        request.stop_order_id = stop_order_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.StopOrdersService/CancelStopOrder",
            request,
            CancelStopOrderResponse,
        )
