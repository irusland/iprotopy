# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tinkoff/invest/grpc/common.proto, tinkoff/invest/grpc/instruments.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib


class InstrumentType(betterproto.Enum):
    """Тип инструмента."""

    INSTRUMENT_TYPE_UNSPECIFIED = 0
    INSTRUMENT_TYPE_BOND = 1
    INSTRUMENT_TYPE_SHARE = 2
    INSTRUMENT_TYPE_CURRENCY = 3
    INSTRUMENT_TYPE_ETF = 4
    INSTRUMENT_TYPE_FUTURES = 5
    INSTRUMENT_TYPE_SP = 6
    INSTRUMENT_TYPE_OPTION = 7
    INSTRUMENT_TYPE_CLEARING_CERTIFICATE = 8
    INSTRUMENT_TYPE_INDEX = 9
    INSTRUMENT_TYPE_COMMODITY = 10


class SecurityTradingStatus(betterproto.Enum):
    """Режим торгов инструмента"""

    SECURITY_TRADING_STATUS_UNSPECIFIED = 0
    SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING = 1
    SECURITY_TRADING_STATUS_OPENING_PERIOD = 2
    SECURITY_TRADING_STATUS_CLOSING_PERIOD = 3
    SECURITY_TRADING_STATUS_BREAK_IN_TRADING = 4
    SECURITY_TRADING_STATUS_NORMAL_TRADING = 5
    SECURITY_TRADING_STATUS_CLOSING_AUCTION = 6
    SECURITY_TRADING_STATUS_DARK_POOL_AUCTION = 7
    SECURITY_TRADING_STATUS_DISCRETE_AUCTION = 8
    SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD = 9
    SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE = 10
    SECURITY_TRADING_STATUS_SESSION_ASSIGNED = 11
    SECURITY_TRADING_STATUS_SESSION_CLOSE = 12
    SECURITY_TRADING_STATUS_SESSION_OPEN = 13
    SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING = 14
    SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING = 15
    SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING = 16


class PriceType(betterproto.Enum):
    """Тип цены."""

    PRICE_TYPE_UNSPECIFIED = 0
    PRICE_TYPE_POINT = 1
    PRICE_TYPE_CURRENCY = 2


class ResultSubscriptionStatus(betterproto.Enum):
    RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED = 0
    RESULT_SUBSCRIPTION_STATUS_OK = 1
    RESULT_SUBSCRIPTION_STATUS_ERROR = 13


class CouponType(betterproto.Enum):
    """Тип купонов."""

    COUPON_TYPE_UNSPECIFIED = 0
    COUPON_TYPE_CONSTANT = 1
    COUPON_TYPE_FLOATING = 2
    COUPON_TYPE_DISCOUNT = 3
    COUPON_TYPE_MORTGAGE = 4
    COUPON_TYPE_FIX = 5
    COUPON_TYPE_VARIABLE = 6
    COUPON_TYPE_OTHER = 7


class OptionDirection(betterproto.Enum):
    """Тип опциона по направлению сделки."""

    OPTION_DIRECTION_UNSPECIFIED = 0
    OPTION_DIRECTION_PUT = 1
    OPTION_DIRECTION_CALL = 2


class OptionPaymentType(betterproto.Enum):
    """Тип расчётов по опциону."""

    OPTION_PAYMENT_TYPE_UNSPECIFIED = 0
    OPTION_PAYMENT_TYPE_PREMIUM = 1
    OPTION_PAYMENT_TYPE_MARGINAL = 2


class OptionStyle(betterproto.Enum):
    """Тип опциона по стилю."""

    OPTION_STYLE_UNSPECIFIED = 0
    OPTION_STYLE_AMERICAN = 1
    OPTION_STYLE_EUROPEAN = 2


class OptionSettlementType(betterproto.Enum):
    """Тип опциона по способу исполнения."""

    OPTION_EXECUTION_TYPE_UNSPECIFIED = 0
    OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY = 1
    OPTION_EXECUTION_TYPE_CASH_SETTLEMENT = 2


class InstrumentIdType(betterproto.Enum):
    """
    Тип идентификатора инструмента. [Подробнее об идентификации инструментов](h
    ttps://russianinvestments.github.io/investAPI/faq_identification/).
    """

    INSTRUMENT_ID_UNSPECIFIED = 0
    INSTRUMENT_ID_TYPE_FIGI = 1
    INSTRUMENT_ID_TYPE_TICKER = 2
    INSTRUMENT_ID_TYPE_UID = 3
    INSTRUMENT_ID_TYPE_POSITION_UID = 4


class InstrumentStatus(betterproto.Enum):
    """Статус запрашиваемых инструментов."""

    INSTRUMENT_STATUS_UNSPECIFIED = 0
    INSTRUMENT_STATUS_BASE = 1
    INSTRUMENT_STATUS_ALL = 2


class ShareType(betterproto.Enum):
    """Тип акций."""

    SHARE_TYPE_UNSPECIFIED = 0
    SHARE_TYPE_COMMON = 1
    SHARE_TYPE_PREFERRED = 2
    SHARE_TYPE_ADR = 3
    SHARE_TYPE_GDR = 4
    SHARE_TYPE_MLP = 5
    SHARE_TYPE_NY_REG_SHRS = 6
    SHARE_TYPE_CLOSED_END_FUND = 7
    SHARE_TYPE_REIT = 8


class AssetType(betterproto.Enum):
    """Тип актива."""

    ASSET_TYPE_UNSPECIFIED = 0
    ASSET_TYPE_CURRENCY = 1
    ASSET_TYPE_COMMODITY = 2
    ASSET_TYPE_INDEX = 3
    ASSET_TYPE_SECURITY = 4


class StructuredProductType(betterproto.Enum):
    """Тип структурной ноты."""

    SP_TYPE_UNSPECIFIED = 0
    SP_TYPE_DELIVERABLE = 1
    SP_TYPE_NON_DELIVERABLE = 2


class EditFavoritesActionType(betterproto.Enum):
    """Тип действия со списком избранных инструментов."""

    EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED = 0
    EDIT_FAVORITES_ACTION_TYPE_ADD = 1
    EDIT_FAVORITES_ACTION_TYPE_DEL = 2


class RealExchange(betterproto.Enum):
    """Реальная площадка исполнения расчётов."""

    REAL_EXCHANGE_UNSPECIFIED = 0
    REAL_EXCHANGE_MOEX = 1
    REAL_EXCHANGE_RTS = 2
    REAL_EXCHANGE_OTC = 3
    REAL_EXCHANGE_DEALER = 4


class Recommendation(betterproto.Enum):
    RECOMMENDATION_UNSPECIFIED = 0
    RECOMMENDATION_BUY = 1
    RECOMMENDATION_HOLD = 2
    RECOMMENDATION_SELL = 3


class RiskLevel(betterproto.Enum):
    """Уровень риска облигации."""

    RISK_LEVEL_UNSPECIFIED = 0
    RISK_LEVEL_LOW = 1
    RISK_LEVEL_MODERATE = 2
    RISK_LEVEL_HIGH = 3


class BondType(betterproto.Enum):
    BOND_TYPE_UNSPECIFIED = 0
    BOND_TYPE_REPLACED = 1


class InstrumentExchangeType(betterproto.Enum):
    """Площадка торговли."""

    INSTRUMENT_EXCHANGE_UNSPECIFIED = 0
    INSTRUMENT_EXCHANGE_DEALER = 1


class GetBondEventsRequestEventType(betterproto.Enum):
    EVENT_TYPE_UNSPECIFIED = 0
    EVENT_TYPE_CPN = 1
    EVENT_TYPE_CALL = 2
    EVENT_TYPE_MTY = 3
    EVENT_TYPE_CONV = 4


class GetAssetReportsResponseAssetReportPeriodType(betterproto.Enum):
    PERIOD_TYPE_UNSPECIFIED = 0
    PERIOD_TYPE_QUARTER = 1
    PERIOD_TYPE_SEMIANNUAL = 2
    PERIOD_TYPE_ANNUAL = 3


@dataclass
class MoneyValue(betterproto.Message):
    """Денежная сумма в определённой валюте."""

    # Строковый ISO-код валюты.
    currency: str = betterproto.string_field(1)
    # Целая часть суммы, может быть отрицательным числом.
    units: int = betterproto.int64_field(2)
    # Дробная часть суммы, может быть отрицательным числом.
    nano: int = betterproto.int32_field(3)


@dataclass
class Quotation(betterproto.Message):
    """Котировка — денежная сумма без указания валюты."""

    # Целая часть суммы, может быть отрицательным числом.
    units: int = betterproto.int64_field(1)
    # Дробная часть суммы, может быть отрицательным числом.
    nano: int = betterproto.int32_field(2)


@dataclass
class Ping(betterproto.Message):
    """Проверка активности стрима."""

    time: datetime = betterproto.message_field(1)
    stream_id: str = betterproto.string_field(2)


@dataclass
class Page(betterproto.Message):
    limit: int = betterproto.int32_field(1)
    page_number: int = betterproto.int32_field(2)


@dataclass
class PageResponse(betterproto.Message):
    limit: int = betterproto.int32_field(1)
    page_number: int = betterproto.int32_field(2)
    total_count: int = betterproto.int32_field(3)


@dataclass
class ResponseMetadata(betterproto.Message):
    tracking_id: str = betterproto.string_field(42)
    server_time: datetime = betterproto.message_field(43)


@dataclass
class BrandData(betterproto.Message):
    logo_name: str = betterproto.string_field(1)
    logo_base_color: str = betterproto.string_field(2)
    text_color: str = betterproto.string_field(3)


@dataclass
class ErrorDetail(betterproto.Message):
    code: str = betterproto.string_field(1)
    message: str = betterproto.string_field(3)


@dataclass
class TradingSchedulesRequest(betterproto.Message):
    """Запрос расписания торгов."""

    exchange: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class TradingSchedulesResponse(betterproto.Message):
    """Список торговых площадок."""

    exchanges: List["TradingSchedule"] = betterproto.message_field(1)


@dataclass
class TradingSchedule(betterproto.Message):
    """Данные по торговой площадке."""

    exchange: str = betterproto.string_field(1)
    days: List["TradingDay"] = betterproto.message_field(2)


@dataclass
class TradingDay(betterproto.Message):
    """Информация о времени торгов."""

    date: datetime = betterproto.message_field(1)
    is_trading_day: bool = betterproto.bool_field(2)
    start_time: datetime = betterproto.message_field(3)
    end_time: datetime = betterproto.message_field(4)
    opening_auction_start_time: datetime = betterproto.message_field(7)
    closing_auction_end_time: datetime = betterproto.message_field(8)
    evening_opening_auction_start_time: datetime = betterproto.message_field(9)
    evening_start_time: datetime = betterproto.message_field(10)
    evening_end_time: datetime = betterproto.message_field(11)
    clearing_start_time: datetime = betterproto.message_field(12)
    clearing_end_time: datetime = betterproto.message_field(13)
    premarket_start_time: datetime = betterproto.message_field(14)
    premarket_end_time: datetime = betterproto.message_field(15)
    closing_auction_start_time: datetime = betterproto.message_field(16)
    opening_auction_end_time: datetime = betterproto.message_field(17)
    intervals: List["TradingInterval"] = betterproto.message_field(18)


@dataclass
class InstrumentRequest(betterproto.Message):
    """Запрос получения инструмента по идентификатору."""

    id_type: "InstrumentIdType" = betterproto.enum_field(1)
    class_code: str = betterproto.string_field(2)
    id: str = betterproto.string_field(3)


@dataclass
class InstrumentsRequest(betterproto.Message):
    """Запрос получения инструментов."""

    instrument_status: "InstrumentStatus" = betterproto.enum_field(1)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(2)


@dataclass
class FilterOptionsRequest(betterproto.Message):
    """Параметры фильтрации опционов."""

    basic_asset_uid: str = betterproto.string_field(1)
    basic_asset_position_uid: str = betterproto.string_field(2)


@dataclass
class BondResponse(betterproto.Message):
    """Информация об облигации."""

    instrument: "Bond" = betterproto.message_field(1)


@dataclass
class BondsResponse(betterproto.Message):
    """Список облигаций."""

    instruments: List["Bond"] = betterproto.message_field(1)


@dataclass
class GetBondCouponsRequest(betterproto.Message):
    """Запрос купонов по облигации."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetBondCouponsResponse(betterproto.Message):
    """Купоны по облигации."""

    events: List["Coupon"] = betterproto.message_field(1)


@dataclass
class GetBondEventsRequest(betterproto.Message):
    """События по облигации."""

    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)
    type: "GetBondEventsRequestEventType" = betterproto.enum_field(5)


@dataclass
class GetBondEventsResponse(betterproto.Message):
    """Объект передачи информации о событии облигации."""

    events: List["GetBondEventsResponseBondEvent"] = betterproto.message_field(1)


@dataclass
class GetBondEventsResponseBondEvent(betterproto.Message):
    instrument_id: str = betterproto.string_field(2)
    event_number: int = betterproto.int32_field(3)
    event_date: datetime = betterproto.message_field(4)
    event_type: "GetBondEventsRequestEventType" = betterproto.enum_field(5)
    event_total_vol: "Quotation" = betterproto.message_field(6)
    fix_date: datetime = betterproto.message_field(7)
    rate_date: datetime = betterproto.message_field(8)
    default_date: datetime = betterproto.message_field(9)
    real_pay_date: datetime = betterproto.message_field(10)
    pay_date: datetime = betterproto.message_field(11)
    pay_one_bond: "MoneyValue" = betterproto.message_field(12)
    money_flow_val: "MoneyValue" = betterproto.message_field(13)
    execution: str = betterproto.string_field(14)
    operation_type: str = betterproto.string_field(15)
    value: "Quotation" = betterproto.message_field(16)
    note: str = betterproto.string_field(17)
    convert_to_fin_tool_id: str = betterproto.string_field(18)
    coupon_start_date: datetime = betterproto.message_field(19)
    coupon_end_date: datetime = betterproto.message_field(20)
    coupon_period: int = betterproto.int32_field(21)
    coupon_interest_rate: "Quotation" = betterproto.message_field(22)


@dataclass
class Coupon(betterproto.Message):
    """Объект передачи информации о купоне облигации."""

    figi: str = betterproto.string_field(1)
    coupon_date: datetime = betterproto.message_field(2)
    coupon_number: int = betterproto.int64_field(3)
    fix_date: datetime = betterproto.message_field(4)
    pay_one_bond: "MoneyValue" = betterproto.message_field(5)
    coupon_type: "CouponType" = betterproto.enum_field(6)
    coupon_start_date: datetime = betterproto.message_field(7)
    coupon_end_date: datetime = betterproto.message_field(8)
    coupon_period: int = betterproto.int32_field(9)


@dataclass
class CurrencyResponse(betterproto.Message):
    """Данные по валюте."""

    instrument: "Currency" = betterproto.message_field(1)


@dataclass
class CurrenciesResponse(betterproto.Message):
    """Данные по валютам."""

    instruments: List["Currency"] = betterproto.message_field(1)


@dataclass
class EtfResponse(betterproto.Message):
    """Данные по фонду."""

    instrument: "Etf" = betterproto.message_field(1)


@dataclass
class EtfsResponse(betterproto.Message):
    """Данные по фондам."""

    instruments: List["Etf"] = betterproto.message_field(1)


@dataclass
class FutureResponse(betterproto.Message):
    """Данные по фьючерсу."""

    instrument: "Future" = betterproto.message_field(1)


@dataclass
class FuturesResponse(betterproto.Message):
    """Данные по фьючерсам."""

    instruments: List["Future"] = betterproto.message_field(1)


@dataclass
class OptionResponse(betterproto.Message):
    """Данные по опциону."""

    instrument: "Option" = betterproto.message_field(1)


@dataclass
class OptionsResponse(betterproto.Message):
    """Данные по опционам."""

    instruments: List["Option"] = betterproto.message_field(1)


@dataclass
class Option(betterproto.Message):
    """Опцион."""

    uid: str = betterproto.string_field(1)
    position_uid: str = betterproto.string_field(2)
    ticker: str = betterproto.string_field(3)
    class_code: str = betterproto.string_field(4)
    basic_asset_position_uid: str = betterproto.string_field(5)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(21)
    real_exchange: "RealExchange" = betterproto.enum_field(31)
    direction: "OptionDirection" = betterproto.enum_field(41)
    payment_type: "OptionPaymentType" = betterproto.enum_field(42)
    style: "OptionStyle" = betterproto.enum_field(43)
    settlement_type: "OptionSettlementType" = betterproto.enum_field(44)
    name: str = betterproto.string_field(101)
    currency: str = betterproto.string_field(111)
    settlement_currency: str = betterproto.string_field(112)
    asset_type: str = betterproto.string_field(131)
    basic_asset: str = betterproto.string_field(132)
    exchange: str = betterproto.string_field(141)
    country_of_risk: str = betterproto.string_field(151)
    country_of_risk_name: str = betterproto.string_field(152)
    sector: str = betterproto.string_field(161)
    brand: "BrandData" = betterproto.message_field(162)
    lot: int = betterproto.int32_field(201)
    basic_asset_size: "Quotation" = betterproto.message_field(211)
    klong: "Quotation" = betterproto.message_field(221)
    kshort: "Quotation" = betterproto.message_field(222)
    dlong: "Quotation" = betterproto.message_field(223)
    dshort: "Quotation" = betterproto.message_field(224)
    dlong_min: "Quotation" = betterproto.message_field(225)
    dshort_min: "Quotation" = betterproto.message_field(226)
    min_price_increment: "Quotation" = betterproto.message_field(231)
    strike_price: "MoneyValue" = betterproto.message_field(241)
    expiration_date: datetime = betterproto.message_field(301)
    first_trade_date: datetime = betterproto.message_field(311)
    last_trade_date: datetime = betterproto.message_field(312)
    first_1min_candle_date: datetime = betterproto.message_field(321)
    first_1day_candle_date: datetime = betterproto.message_field(322)
    short_enabled_flag: bool = betterproto.bool_field(401)
    for_iis_flag: bool = betterproto.bool_field(402)
    otc_flag: bool = betterproto.bool_field(403)
    buy_available_flag: bool = betterproto.bool_field(404)
    sell_available_flag: bool = betterproto.bool_field(405)
    for_qual_investor_flag: bool = betterproto.bool_field(406)
    weekend_flag: bool = betterproto.bool_field(407)
    blocked_tca_flag: bool = betterproto.bool_field(408)
    api_trade_available_flag: bool = betterproto.bool_field(409)


@dataclass
class ShareResponse(betterproto.Message):
    """Данные по акции."""

    instrument: "Share" = betterproto.message_field(1)


@dataclass
class SharesResponse(betterproto.Message):
    """Данные по акциям."""

    instruments: List["Share"] = betterproto.message_field(1)


@dataclass
class Bond(betterproto.Message):
    """Объект передачи информации об облигации."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    coupon_quantity_per_year: int = betterproto.int32_field(17)
    maturity_date: datetime = betterproto.message_field(18)
    nominal: "MoneyValue" = betterproto.message_field(19)
    initial_nominal: "MoneyValue" = betterproto.message_field(20)
    state_reg_date: datetime = betterproto.message_field(21)
    placement_date: datetime = betterproto.message_field(22)
    placement_price: "MoneyValue" = betterproto.message_field(23)
    aci_value: "MoneyValue" = betterproto.message_field(24)
    country_of_risk: str = betterproto.string_field(25)
    country_of_risk_name: str = betterproto.string_field(26)
    sector: str = betterproto.string_field(27)
    issue_kind: str = betterproto.string_field(28)
    issue_size: int = betterproto.int64_field(29)
    issue_size_plan: int = betterproto.int64_field(30)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(31)
    otc_flag: bool = betterproto.bool_field(32)
    buy_available_flag: bool = betterproto.bool_field(33)
    sell_available_flag: bool = betterproto.bool_field(34)
    floating_coupon_flag: bool = betterproto.bool_field(35)
    perpetual_flag: bool = betterproto.bool_field(36)
    amortization_flag: bool = betterproto.bool_field(37)
    min_price_increment: "Quotation" = betterproto.message_field(38)
    api_trade_available_flag: bool = betterproto.bool_field(39)
    uid: str = betterproto.string_field(40)
    real_exchange: "RealExchange" = betterproto.enum_field(41)
    position_uid: str = betterproto.string_field(42)
    asset_uid: str = betterproto.string_field(43)
    for_iis_flag: bool = betterproto.bool_field(51)
    for_qual_investor_flag: bool = betterproto.bool_field(52)
    weekend_flag: bool = betterproto.bool_field(53)
    blocked_tca_flag: bool = betterproto.bool_field(54)
    subordinated_flag: bool = betterproto.bool_field(55)
    liquidity_flag: bool = betterproto.bool_field(56)
    first_1min_candle_date: datetime = betterproto.message_field(61)
    first_1day_candle_date: datetime = betterproto.message_field(62)
    risk_level: "RiskLevel" = betterproto.enum_field(63)
    brand: "BrandData" = betterproto.message_field(64)
    bond_type: "BondType" = betterproto.enum_field(65)


@dataclass
class Currency(betterproto.Message):
    """Объект передачи информации о валюте."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    nominal: "MoneyValue" = betterproto.message_field(17)
    country_of_risk: str = betterproto.string_field(18)
    country_of_risk_name: str = betterproto.string_field(19)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(20)
    otc_flag: bool = betterproto.bool_field(21)
    buy_available_flag: bool = betterproto.bool_field(22)
    sell_available_flag: bool = betterproto.bool_field(23)
    iso_currency_name: str = betterproto.string_field(24)
    min_price_increment: "Quotation" = betterproto.message_field(25)
    api_trade_available_flag: bool = betterproto.bool_field(26)
    uid: str = betterproto.string_field(27)
    real_exchange: "RealExchange" = betterproto.enum_field(28)
    position_uid: str = betterproto.string_field(29)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(52)
    weekend_flag: bool = betterproto.bool_field(53)
    blocked_tca_flag: bool = betterproto.bool_field(54)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class Etf(betterproto.Message):
    """Объект передачи информации об инвестиционном фонде."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    fixed_commission: "Quotation" = betterproto.message_field(17)
    focus_type: str = betterproto.string_field(18)
    released_date: datetime = betterproto.message_field(19)
    num_shares: "Quotation" = betterproto.message_field(20)
    country_of_risk: str = betterproto.string_field(21)
    country_of_risk_name: str = betterproto.string_field(22)
    sector: str = betterproto.string_field(23)
    rebalancing_freq: str = betterproto.string_field(24)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    min_price_increment: "Quotation" = betterproto.message_field(29)
    api_trade_available_flag: bool = betterproto.bool_field(30)
    uid: str = betterproto.string_field(31)
    real_exchange: "RealExchange" = betterproto.enum_field(32)
    position_uid: str = betterproto.string_field(33)
    asset_uid: str = betterproto.string_field(34)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(35)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(42)
    weekend_flag: bool = betterproto.bool_field(43)
    blocked_tca_flag: bool = betterproto.bool_field(44)
    liquidity_flag: bool = betterproto.bool_field(45)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class Future(betterproto.Message):
    """Объект передачи информации о фьючерсе."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    lot: int = betterproto.int32_field(4)
    currency: str = betterproto.string_field(5)
    klong: "Quotation" = betterproto.message_field(6)
    kshort: "Quotation" = betterproto.message_field(7)
    dlong: "Quotation" = betterproto.message_field(8)
    dshort: "Quotation" = betterproto.message_field(9)
    dlong_min: "Quotation" = betterproto.message_field(10)
    dshort_min: "Quotation" = betterproto.message_field(11)
    short_enabled_flag: bool = betterproto.bool_field(12)
    name: str = betterproto.string_field(13)
    exchange: str = betterproto.string_field(14)
    first_trade_date: datetime = betterproto.message_field(15)
    last_trade_date: datetime = betterproto.message_field(16)
    futures_type: str = betterproto.string_field(17)
    asset_type: str = betterproto.string_field(18)
    basic_asset: str = betterproto.string_field(19)
    basic_asset_size: "Quotation" = betterproto.message_field(20)
    country_of_risk: str = betterproto.string_field(21)
    country_of_risk_name: str = betterproto.string_field(22)
    sector: str = betterproto.string_field(23)
    expiration_date: datetime = betterproto.message_field(24)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    min_price_increment: "Quotation" = betterproto.message_field(29)
    api_trade_available_flag: bool = betterproto.bool_field(30)
    uid: str = betterproto.string_field(31)
    real_exchange: "RealExchange" = betterproto.enum_field(32)
    position_uid: str = betterproto.string_field(33)
    basic_asset_position_uid: str = betterproto.string_field(34)
    for_iis_flag: bool = betterproto.bool_field(41)
    for_qual_investor_flag: bool = betterproto.bool_field(42)
    weekend_flag: bool = betterproto.bool_field(43)
    blocked_tca_flag: bool = betterproto.bool_field(44)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    initial_margin_on_buy: "MoneyValue" = betterproto.message_field(61)
    initial_margin_on_sell: "MoneyValue" = betterproto.message_field(62)
    min_price_increment_amount: "Quotation" = betterproto.message_field(63)
    brand: "BrandData" = betterproto.message_field(64)


@dataclass
class Share(betterproto.Message):
    """Объект передачи информации об акции."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(15)
    exchange: str = betterproto.string_field(16)
    ipo_date: datetime = betterproto.message_field(17)
    issue_size: int = betterproto.int64_field(18)
    country_of_risk: str = betterproto.string_field(19)
    country_of_risk_name: str = betterproto.string_field(20)
    sector: str = betterproto.string_field(21)
    issue_size_plan: int = betterproto.int64_field(22)
    nominal: "MoneyValue" = betterproto.message_field(23)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(25)
    otc_flag: bool = betterproto.bool_field(26)
    buy_available_flag: bool = betterproto.bool_field(27)
    sell_available_flag: bool = betterproto.bool_field(28)
    div_yield_flag: bool = betterproto.bool_field(29)
    share_type: "ShareType" = betterproto.enum_field(30)
    min_price_increment: "Quotation" = betterproto.message_field(31)
    api_trade_available_flag: bool = betterproto.bool_field(32)
    uid: str = betterproto.string_field(33)
    real_exchange: "RealExchange" = betterproto.enum_field(34)
    position_uid: str = betterproto.string_field(35)
    asset_uid: str = betterproto.string_field(36)
    instrument_exchange: "InstrumentExchangeType" = betterproto.enum_field(37)
    for_iis_flag: bool = betterproto.bool_field(46)
    for_qual_investor_flag: bool = betterproto.bool_field(47)
    weekend_flag: bool = betterproto.bool_field(48)
    blocked_tca_flag: bool = betterproto.bool_field(49)
    liquidity_flag: bool = betterproto.bool_field(50)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class GetAccruedInterestsRequest(betterproto.Message):
    """Запрос НКД по облигации."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetAccruedInterestsResponse(betterproto.Message):
    """НКД облигации."""

    accrued_interests: List["AccruedInterest"] = betterproto.message_field(1)


@dataclass
class AccruedInterest(betterproto.Message):
    """Операция начисления купонов."""

    date: datetime = betterproto.message_field(1)
    value: "Quotation" = betterproto.message_field(2)
    value_percent: "Quotation" = betterproto.message_field(3)
    nominal: "Quotation" = betterproto.message_field(4)


@dataclass
class GetFuturesMarginRequest(betterproto.Message):
    """Запрос информации о фьючерсе"""

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetFuturesMarginResponse(betterproto.Message):
    """Данные по фьючерсу"""

    initial_margin_on_buy: "MoneyValue" = betterproto.message_field(1)
    initial_margin_on_sell: "MoneyValue" = betterproto.message_field(2)
    min_price_increment: "Quotation" = betterproto.message_field(3)
    min_price_increment_amount: "Quotation" = betterproto.message_field(4)


@dataclass
class InstrumentResponse(betterproto.Message):
    """Данные по инструменту."""

    instrument: "Instrument" = betterproto.message_field(1)


@dataclass
class Instrument(betterproto.Message):
    """Объект передачи основной информации об инструменте."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    lot: int = betterproto.int32_field(5)
    currency: str = betterproto.string_field(6)
    klong: "Quotation" = betterproto.message_field(7)
    kshort: "Quotation" = betterproto.message_field(8)
    dlong: "Quotation" = betterproto.message_field(9)
    dshort: "Quotation" = betterproto.message_field(10)
    dlong_min: "Quotation" = betterproto.message_field(11)
    dshort_min: "Quotation" = betterproto.message_field(12)
    short_enabled_flag: bool = betterproto.bool_field(13)
    name: str = betterproto.string_field(14)
    exchange: str = betterproto.string_field(15)
    country_of_risk: str = betterproto.string_field(16)
    country_of_risk_name: str = betterproto.string_field(17)
    instrument_type: str = betterproto.string_field(18)
    trading_status: "SecurityTradingStatus" = betterproto.enum_field(19)
    otc_flag: bool = betterproto.bool_field(20)
    buy_available_flag: bool = betterproto.bool_field(21)
    sell_available_flag: bool = betterproto.bool_field(22)
    min_price_increment: "Quotation" = betterproto.message_field(23)
    api_trade_available_flag: bool = betterproto.bool_field(24)
    uid: str = betterproto.string_field(25)
    real_exchange: "RealExchange" = betterproto.enum_field(26)
    position_uid: str = betterproto.string_field(27)
    asset_uid: str = betterproto.string_field(28)
    for_iis_flag: bool = betterproto.bool_field(36)
    for_qual_investor_flag: bool = betterproto.bool_field(37)
    weekend_flag: bool = betterproto.bool_field(38)
    blocked_tca_flag: bool = betterproto.bool_field(39)
    instrument_kind: "InstrumentType" = betterproto.enum_field(40)
    first_1min_candle_date: datetime = betterproto.message_field(56)
    first_1day_candle_date: datetime = betterproto.message_field(57)
    brand: "BrandData" = betterproto.message_field(60)


@dataclass
class GetDividendsRequest(betterproto.Message):
    """Запрос дивидендов."""

    figi: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    instrument_id: str = betterproto.string_field(4)


@dataclass
class GetDividendsResponse(betterproto.Message):
    """Дивиденды."""

    dividends: List["Dividend"] = betterproto.message_field(1)


@dataclass
class Dividend(betterproto.Message):
    """Информация о выплате."""

    dividend_net: "MoneyValue" = betterproto.message_field(1)
    payment_date: datetime = betterproto.message_field(2)
    declared_date: datetime = betterproto.message_field(3)
    last_buy_date: datetime = betterproto.message_field(4)
    dividend_type: str = betterproto.string_field(5)
    record_date: datetime = betterproto.message_field(6)
    regularity: str = betterproto.string_field(7)
    close_price: "MoneyValue" = betterproto.message_field(8)
    yield_value: "Quotation" = betterproto.message_field(9)
    created_at: datetime = betterproto.message_field(10)


@dataclass
class AssetRequest(betterproto.Message):
    """Запрос актива по идентификатору."""

    id: str = betterproto.string_field(1)


@dataclass
class AssetResponse(betterproto.Message):
    """Данные по активу."""

    asset: "AssetFull" = betterproto.message_field(1)


@dataclass
class AssetsRequest(betterproto.Message):
    """Запрос списка активов."""

    instrument_type: "InstrumentType" = betterproto.enum_field(1)


@dataclass
class AssetsResponse(betterproto.Message):
    """Список активов."""

    assets: List["Asset"] = betterproto.message_field(1)


@dataclass
class AssetFull(betterproto.Message):
    uid: str = betterproto.string_field(1)
    type: "AssetType" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)
    name_brief: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    deleted_at: datetime = betterproto.message_field(6)
    required_tests: List[str] = betterproto.string_field(7)
    currency: "AssetCurrency" = betterproto.message_field(8, group="ext")
    security: "AssetSecurity" = betterproto.message_field(9, group="ext")
    gos_reg_code: str = betterproto.string_field(10)
    cfi: str = betterproto.string_field(11)
    code_nsd: str = betterproto.string_field(12)
    status: str = betterproto.string_field(13)
    brand: "Brand" = betterproto.message_field(14)
    updated_at: datetime = betterproto.message_field(15)
    br_code: str = betterproto.string_field(16)
    br_code_name: str = betterproto.string_field(17)
    instruments: List["AssetInstrument"] = betterproto.message_field(18)


@dataclass
class Asset(betterproto.Message):
    """Информация об активе."""

    uid: str = betterproto.string_field(1)
    type: "AssetType" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)
    instruments: List["AssetInstrument"] = betterproto.message_field(4)


@dataclass
class AssetCurrency(betterproto.Message):
    """Валюта."""

    base_currency: str = betterproto.string_field(1)


@dataclass
class AssetSecurity(betterproto.Message):
    """Ценная бумага."""

    isin: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    share: "AssetShare" = betterproto.message_field(3, group="ext")
    bond: "AssetBond" = betterproto.message_field(4, group="ext")
    sp: "AssetStructuredProduct" = betterproto.message_field(5, group="ext")
    etf: "AssetEtf" = betterproto.message_field(6, group="ext")
    clearing_certificate: "AssetClearingCertificate" = betterproto.message_field(
        7, group="ext"
    )


@dataclass
class AssetShare(betterproto.Message):
    """Акция."""

    type: "ShareType" = betterproto.enum_field(1)
    issue_size: "Quotation" = betterproto.message_field(2)
    nominal: "Quotation" = betterproto.message_field(3)
    nominal_currency: str = betterproto.string_field(4)
    primary_index: str = betterproto.string_field(5)
    dividend_rate: "Quotation" = betterproto.message_field(6)
    preferred_share_type: str = betterproto.string_field(7)
    ipo_date: datetime = betterproto.message_field(8)
    registry_date: datetime = betterproto.message_field(9)
    div_yield_flag: bool = betterproto.bool_field(10)
    issue_kind: str = betterproto.string_field(11)
    placement_date: datetime = betterproto.message_field(12)
    repres_isin: str = betterproto.string_field(13)
    issue_size_plan: "Quotation" = betterproto.message_field(14)
    total_float: "Quotation" = betterproto.message_field(15)


@dataclass
class AssetBond(betterproto.Message):
    """Облигация."""

    current_nominal: "Quotation" = betterproto.message_field(1)
    borrow_name: str = betterproto.string_field(2)
    issue_size: "Quotation" = betterproto.message_field(3)
    nominal: "Quotation" = betterproto.message_field(4)
    nominal_currency: str = betterproto.string_field(5)
    issue_kind: str = betterproto.string_field(6)
    interest_kind: str = betterproto.string_field(7)
    coupon_quantity_per_year: int = betterproto.int32_field(8)
    indexed_nominal_flag: bool = betterproto.bool_field(9)
    subordinated_flag: bool = betterproto.bool_field(10)
    collateral_flag: bool = betterproto.bool_field(11)
    tax_free_flag: bool = betterproto.bool_field(12)
    amortization_flag: bool = betterproto.bool_field(13)
    floating_coupon_flag: bool = betterproto.bool_field(14)
    perpetual_flag: bool = betterproto.bool_field(15)
    maturity_date: datetime = betterproto.message_field(16)
    return_condition: str = betterproto.string_field(17)
    state_reg_date: datetime = betterproto.message_field(18)
    placement_date: datetime = betterproto.message_field(19)
    placement_price: "Quotation" = betterproto.message_field(20)
    issue_size_plan: "Quotation" = betterproto.message_field(21)


@dataclass
class AssetStructuredProduct(betterproto.Message):
    """Структурная нота."""

    borrow_name: str = betterproto.string_field(1)
    nominal: "Quotation" = betterproto.message_field(2)
    nominal_currency: str = betterproto.string_field(3)
    type: "StructuredProductType" = betterproto.enum_field(4)
    logic_portfolio: str = betterproto.string_field(5)
    asset_type: "AssetType" = betterproto.enum_field(6)
    basic_asset: str = betterproto.string_field(7)
    safety_barrier: "Quotation" = betterproto.message_field(8)
    maturity_date: datetime = betterproto.message_field(9)
    issue_size_plan: "Quotation" = betterproto.message_field(10)
    issue_size: "Quotation" = betterproto.message_field(11)
    placement_date: datetime = betterproto.message_field(12)
    issue_kind: str = betterproto.string_field(13)


@dataclass
class AssetEtf(betterproto.Message):
    """Фонд."""

    total_expense: "Quotation" = betterproto.message_field(1)
    hurdle_rate: "Quotation" = betterproto.message_field(2)
    performance_fee: "Quotation" = betterproto.message_field(3)
    fixed_commission: "Quotation" = betterproto.message_field(4)
    payment_type: str = betterproto.string_field(5)
    watermark_flag: bool = betterproto.bool_field(6)
    buy_premium: "Quotation" = betterproto.message_field(7)
    sell_discount: "Quotation" = betterproto.message_field(8)
    rebalancing_flag: bool = betterproto.bool_field(9)
    rebalancing_freq: str = betterproto.string_field(10)
    management_type: str = betterproto.string_field(11)
    primary_index: str = betterproto.string_field(12)
    focus_type: str = betterproto.string_field(13)
    leveraged_flag: bool = betterproto.bool_field(14)
    num_share: "Quotation" = betterproto.message_field(15)
    ucits_flag: bool = betterproto.bool_field(16)
    released_date: datetime = betterproto.message_field(17)
    description: str = betterproto.string_field(18)
    primary_index_description: str = betterproto.string_field(19)
    primary_index_company: str = betterproto.string_field(20)
    index_recovery_period: "Quotation" = betterproto.message_field(21)
    inav_code: str = betterproto.string_field(22)
    div_yield_flag: bool = betterproto.bool_field(23)
    expense_commission: "Quotation" = betterproto.message_field(24)
    primary_index_tracking_error: "Quotation" = betterproto.message_field(25)
    rebalancing_plan: str = betterproto.string_field(26)
    tax_rate: str = betterproto.string_field(27)
    rebalancing_dates: List[datetime] = betterproto.message_field(28)
    issue_kind: str = betterproto.string_field(29)
    nominal: "Quotation" = betterproto.message_field(30)
    nominal_currency: str = betterproto.string_field(31)


@dataclass
class AssetClearingCertificate(betterproto.Message):
    """Клиринговый сертификат участия."""

    nominal: "Quotation" = betterproto.message_field(1)
    nominal_currency: str = betterproto.string_field(2)


@dataclass
class Brand(betterproto.Message):
    """Бренд."""

    uid: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    info: str = betterproto.string_field(4)
    company: str = betterproto.string_field(5)
    sector: str = betterproto.string_field(6)
    country_of_risk: str = betterproto.string_field(7)
    country_of_risk_name: str = betterproto.string_field(8)


@dataclass
class AssetInstrument(betterproto.Message):
    """Идентификаторы инструмента."""

    uid: str = betterproto.string_field(1)
    figi: str = betterproto.string_field(2)
    instrument_type: str = betterproto.string_field(3)
    ticker: str = betterproto.string_field(4)
    class_code: str = betterproto.string_field(5)
    links: List["InstrumentLink"] = betterproto.message_field(6)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    position_uid: str = betterproto.string_field(11)


@dataclass
class InstrumentLink(betterproto.Message):
    """Связь с другим инструментом."""

    type: str = betterproto.string_field(1)
    instrument_uid: str = betterproto.string_field(2)


@dataclass
class GetFavoritesRequest(betterproto.Message):
    """
    Запрос списка избранных инструментов, входные параметры не требуются.
    """

    pass


@dataclass
class GetFavoritesResponse(betterproto.Message):
    """В ответ передаётся список избранных инструментов в качестве массива."""

    favorite_instruments: List["FavoriteInstrument"] = betterproto.message_field(1)


@dataclass
class FavoriteInstrument(betterproto.Message):
    """Массив избранных инструментов."""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    isin: str = betterproto.string_field(4)
    instrument_type: str = betterproto.string_field(11)
    name: str = betterproto.string_field(12)
    uid: str = betterproto.string_field(13)
    otc_flag: bool = betterproto.bool_field(16)
    api_trade_available_flag: bool = betterproto.bool_field(17)
    instrument_kind: "InstrumentType" = betterproto.enum_field(18)


@dataclass
class EditFavoritesRequest(betterproto.Message):
    """Запрос редактирования списка избранных инструментов."""

    instruments: List["EditFavoritesRequestInstrument"] = betterproto.message_field(1)
    action_type: "EditFavoritesActionType" = betterproto.enum_field(6)


@dataclass
class EditFavoritesRequestInstrument(betterproto.Message):
    """
    Массив инструментов для редактирования списка избранных инструментов.
    """

    figi: str = betterproto.string_field(1)
    instrument_id: str = betterproto.string_field(2)


@dataclass
class EditFavoritesResponse(betterproto.Message):
    """Результат редактирования списка избранных инструментов."""

    favorite_instruments: List["FavoriteInstrument"] = betterproto.message_field(1)


@dataclass
class GetCountriesRequest(betterproto.Message):
    """Запрос справочника стран."""

    pass


@dataclass
class GetCountriesResponse(betterproto.Message):
    """Справочник стран."""

    countries: List["CountryResponse"] = betterproto.message_field(1)


@dataclass
class IndicativesRequest(betterproto.Message):
    """Запрос справочника индексов и товаров"""

    pass


@dataclass
class IndicativesResponse(betterproto.Message):
    """Справочник индексов и товаров"""

    instruments: List["IndicativeResponse"] = betterproto.message_field(1)


@dataclass
class IndicativeResponse(betterproto.Message):
    """Индикатив"""

    figi: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    class_code: str = betterproto.string_field(3)
    currency: str = betterproto.string_field(4)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    name: str = betterproto.string_field(12)
    exchange: str = betterproto.string_field(13)
    uid: str = betterproto.string_field(14)
    buy_available_flag: bool = betterproto.bool_field(404)
    sell_available_flag: bool = betterproto.bool_field(405)


@dataclass
class CountryResponse(betterproto.Message):
    """Данные о стране."""

    alfa_two: str = betterproto.string_field(1)
    alfa_three: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    name_brief: str = betterproto.string_field(4)


@dataclass
class FindInstrumentRequest(betterproto.Message):
    """Запрос на поиск инструментов."""

    query: str = betterproto.string_field(1)
    instrument_kind: "InstrumentType" = betterproto.enum_field(2)
    api_trade_available_flag: bool = betterproto.bool_field(3)


@dataclass
class FindInstrumentResponse(betterproto.Message):
    """Результат поиска инструментов."""

    instruments: List["InstrumentShort"] = betterproto.message_field(1)


@dataclass
class InstrumentShort(betterproto.Message):
    """Краткая информация об инструменте."""

    isin: str = betterproto.string_field(1)
    figi: str = betterproto.string_field(2)
    ticker: str = betterproto.string_field(3)
    class_code: str = betterproto.string_field(4)
    instrument_type: str = betterproto.string_field(5)
    name: str = betterproto.string_field(6)
    uid: str = betterproto.string_field(7)
    position_uid: str = betterproto.string_field(8)
    instrument_kind: "InstrumentType" = betterproto.enum_field(10)
    api_trade_available_flag: bool = betterproto.bool_field(11)
    for_iis_flag: bool = betterproto.bool_field(12)
    first_1min_candle_date: datetime = betterproto.message_field(26)
    first_1day_candle_date: datetime = betterproto.message_field(27)
    for_qual_investor_flag: bool = betterproto.bool_field(28)
    weekend_flag: bool = betterproto.bool_field(29)
    blocked_tca_flag: bool = betterproto.bool_field(30)


@dataclass
class GetBrandsRequest(betterproto.Message):
    """Запрос списка брендов."""

    paging: "Page" = betterproto.message_field(1)


@dataclass
class GetBrandRequest(betterproto.Message):
    """Запрос бренда."""

    id: str = betterproto.string_field(1)


@dataclass
class GetBrandsResponse(betterproto.Message):
    """Список брендов."""

    brands: List["Brand"] = betterproto.message_field(1)
    paging: "PageResponse" = betterproto.message_field(2)


@dataclass
class GetAssetFundamentalsRequest(betterproto.Message):
    """Запрос фундаментальных показателей"""

    assets: List[str] = betterproto.string_field(1)


@dataclass
class GetAssetFundamentalsResponse(betterproto.Message):
    """Фундаментальные показатели"""

    fundamentals: List["GetAssetFundamentalsResponseStatisticResponse"] = (
        betterproto.message_field(1)
    )


@dataclass
class GetAssetFundamentalsResponseStatisticResponse(betterproto.Message):
    """Фундаментальные показатели по активу"""

    asset_uid: str = betterproto.string_field(1)
    currency: str = betterproto.string_field(2)
    market_capitalization: float = betterproto.double_field(3)
    high_price_last_52_weeks: float = betterproto.double_field(4)
    low_price_last_52_weeks: float = betterproto.double_field(5)
    average_daily_volume_last_10_days: float = betterproto.double_field(6)
    average_daily_volume_last_4_weeks: float = betterproto.double_field(7)
    beta: float = betterproto.double_field(8)
    free_float: float = betterproto.double_field(9)
    forward_annual_dividend_yield: float = betterproto.double_field(10)
    shares_outstanding: float = betterproto.double_field(11)
    revenue_ttm: float = betterproto.double_field(12)
    ebitda_ttm: float = betterproto.double_field(13)
    net_income_ttm: float = betterproto.double_field(14)
    eps_ttm: float = betterproto.double_field(15)
    diluted_eps_ttm: float = betterproto.double_field(16)
    free_cash_flow_ttm: float = betterproto.double_field(17)
    five_year_annual_revenue_growth_rate: float = betterproto.double_field(18)
    three_year_annual_revenue_growth_rate: float = betterproto.double_field(19)
    pe_ratio_ttm: float = betterproto.double_field(20)
    price_to_sales_ttm: float = betterproto.double_field(21)
    price_to_book_ttm: float = betterproto.double_field(22)
    price_to_free_cash_flow_ttm: float = betterproto.double_field(23)
    total_enterprise_value_mrq: float = betterproto.double_field(24)
    ev_to_ebitda_mrq: float = betterproto.double_field(25)
    net_margin_mrq: float = betterproto.double_field(26)
    net_interest_margin_mrq: float = betterproto.double_field(27)
    roe: float = betterproto.double_field(28)
    roa: float = betterproto.double_field(29)
    roic: float = betterproto.double_field(30)
    total_debt_mrq: float = betterproto.double_field(31)
    total_debt_to_equity_mrq: float = betterproto.double_field(32)
    total_debt_to_ebitda_mrq: float = betterproto.double_field(33)
    free_cash_flow_to_price: float = betterproto.double_field(34)
    net_debt_to_ebitda: float = betterproto.double_field(35)
    current_ratio_mrq: float = betterproto.double_field(36)
    fixed_charge_coverage_ratio_fy: float = betterproto.double_field(37)
    dividend_yield_daily_ttm: float = betterproto.double_field(38)
    dividend_rate_ttm: float = betterproto.double_field(39)
    dividends_per_share: float = betterproto.double_field(40)
    five_years_average_dividend_yield: float = betterproto.double_field(41)
    five_year_annual_dividend_growth_rate: float = betterproto.double_field(42)
    dividend_payout_ratio_fy: float = betterproto.double_field(43)
    buy_back_ttm: float = betterproto.double_field(44)
    one_year_annual_revenue_growth_rate: float = betterproto.double_field(45)
    domicile_indicator_code: str = betterproto.string_field(46)
    adr_to_common_share_ratio: float = betterproto.double_field(47)
    number_of_employees: float = betterproto.double_field(48)
    ex_dividend_date: datetime = betterproto.message_field(49)
    fiscal_period_start_date: datetime = betterproto.message_field(50)
    fiscal_period_end_date: datetime = betterproto.message_field(51)
    revenue_change_five_years: float = betterproto.double_field(53)
    eps_change_five_years: float = betterproto.double_field(54)
    ebitda_change_five_years: float = betterproto.double_field(55)
    total_debt_change_five_years: float = betterproto.double_field(56)
    ev_to_sales: float = betterproto.double_field(57)


@dataclass
class GetAssetReportsRequest(betterproto.Message):
    """Запрос отчетов эмитентов"""

    instrument_id: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)


@dataclass
class GetAssetReportsResponse(betterproto.Message):
    """Отчеты эмитентов"""

    events: List["GetAssetReportsResponseGetAssetReportsEvent"] = (
        betterproto.message_field(1)
    )


@dataclass
class GetAssetReportsResponseGetAssetReportsEvent(betterproto.Message):
    """Отчет"""

    instrument_id: str = betterproto.string_field(1)
    report_date: datetime = betterproto.message_field(2)
    period_year: int = betterproto.int32_field(3)
    period_num: int = betterproto.int32_field(4)
    period_type: "GetAssetReportsResponseAssetReportPeriodType" = (
        betterproto.enum_field(5)
    )
    created_at: datetime = betterproto.message_field(6)


@dataclass
class GetConsensusForecastsRequest(betterproto.Message):
    """Запрос консенсус-прогнозов"""

    paging: "Page" = betterproto.message_field(1)


@dataclass
class GetConsensusForecastsResponse(betterproto.Message):
    """Консенсус-прогнозы"""

    items: List["GetConsensusForecastsResponseConsensusForecastsItem"] = (
        betterproto.message_field(1)
    )
    page: "PageResponse" = betterproto.message_field(2)


@dataclass
class GetConsensusForecastsResponseConsensusForecastsItem(betterproto.Message):
    """Прогноз"""

    uid: str = betterproto.string_field(1)
    asset_uid: str = betterproto.string_field(2)
    created_at: datetime = betterproto.message_field(3)
    best_target_price: "Quotation" = betterproto.message_field(4)
    best_target_low: "Quotation" = betterproto.message_field(5)
    best_target_high: "Quotation" = betterproto.message_field(6)
    total_buy_recommend: int = betterproto.int32_field(7)
    total_hold_recommend: int = betterproto.int32_field(8)
    total_sell_recommend: int = betterproto.int32_field(9)
    currency: str = betterproto.string_field(10)
    consensus: "Recommendation" = betterproto.enum_field(11)
    prognosis_date: datetime = betterproto.message_field(12)


@dataclass
class GetForecastRequest(betterproto.Message):
    """Запрос прогнозов инвестдомов."""

    instrument_id: str = betterproto.string_field(1)


@dataclass
class GetForecastResponse(betterproto.Message):
    """Прогнозы инвестдомов по инструменту."""

    targets: List["GetForecastResponseTargetItem"] = betterproto.message_field(1)
    consensus: "GetForecastResponseConsensusItem" = betterproto.message_field(2)


@dataclass
class GetForecastResponseTargetItem(betterproto.Message):
    """Прогноз"""

    uid: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    company: str = betterproto.string_field(3)
    recommendation: "Recommendation" = betterproto.enum_field(4)
    recommendation_date: datetime = betterproto.message_field(5)
    currency: str = betterproto.string_field(6)
    current_price: "Quotation" = betterproto.message_field(7)
    target_price: "Quotation" = betterproto.message_field(8)
    price_change: "Quotation" = betterproto.message_field(9)
    price_change_rel: "Quotation" = betterproto.message_field(10)
    show_name: str = betterproto.string_field(11)


@dataclass
class GetForecastResponseConsensusItem(betterproto.Message):
    """Консенсус-прогноз."""

    uid: str = betterproto.string_field(1)
    ticker: str = betterproto.string_field(2)
    recommendation: "Recommendation" = betterproto.enum_field(3)
    currency: str = betterproto.string_field(4)
    current_price: "Quotation" = betterproto.message_field(5)
    consensus: "Quotation" = betterproto.message_field(6)
    min_target: "Quotation" = betterproto.message_field(7)
    max_target: "Quotation" = betterproto.message_field(8)
    price_change: "Quotation" = betterproto.message_field(9)
    price_change_rel: "Quotation" = betterproto.message_field(10)


@dataclass
class TradingInterval(betterproto.Message):
    type: str = betterproto.string_field(1)
    interval: "TradingIntervalTimeInterval" = betterproto.message_field(2)


@dataclass
class TradingIntervalTimeInterval(betterproto.Message):
    start_ts: datetime = betterproto.message_field(1)
    end_ts: datetime = betterproto.message_field(2)


class InstrumentsServiceStub(betterproto.ServiceStub):
    async def trading_schedules(
        self,
        *,
        exchange: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
    ) -> TradingSchedulesResponse:
        """Получить расписания торгов торговых площадок."""

        request = TradingSchedulesRequest()
        request.exchange = exchange
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules",
            request,
            TradingSchedulesResponse,
        )

    async def bond_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> BondResponse:
        """Получить облигации по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy",
            request,
            BondResponse,
        )

    async def bonds(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> BondsResponse:
        """Получить список облигаций."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds",
            request,
            BondsResponse,
        )

    async def get_bond_coupons(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetBondCouponsResponse:
        """Получить график выплат купонов по облигации."""

        request = GetBondCouponsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondCoupons",
            request,
            GetBondCouponsResponse,
        )

    async def get_bond_events(
        self,
        *,
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
        type: "GetBondEventsRequestEventType" = 0,
    ) -> GetBondEventsResponse:
        """Получить события по облигации"""

        request = GetBondEventsRequest()
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id
        request.type = type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBondEvents",
            request,
            GetBondEventsResponse,
        )

    async def currency_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> CurrencyResponse:
        """Получить валюту по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy",
            request,
            CurrencyResponse,
        )

    async def currencies(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> CurrenciesResponse:
        """Получить список валют."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies",
            request,
            CurrenciesResponse,
        )

    async def etf_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> EtfResponse:
        """Получить инвестиционный фонд по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy",
            request,
            EtfResponse,
        )

    async def etfs(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> EtfsResponse:
        """Получить список инвестиционных фондов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs",
            request,
            EtfsResponse,
        )

    async def future_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> FutureResponse:
        """Получить фьючерс по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy",
            request,
            FutureResponse,
        )

    async def futures(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> FuturesResponse:
        """Получить список фьючерсов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures",
            request,
            FuturesResponse,
        )

    async def option_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> OptionResponse:
        """Получить опцион по его идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionBy",
            request,
            OptionResponse,
        )

    async def options(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> OptionsResponse:
        """Deprecated Получить списка опционов."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Options",
            request,
            OptionsResponse,
        )

    async def options_by(
        self, *, basic_asset_uid: str = "", basic_asset_position_uid: str = ""
    ) -> OptionsResponse:
        """Получить список опционов."""

        request = FilterOptionsRequest()
        request.basic_asset_uid = basic_asset_uid
        request.basic_asset_position_uid = basic_asset_position_uid

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/OptionsBy",
            request,
            OptionsResponse,
        )

    async def share_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> ShareResponse:
        """Получить акцию по её идентификатору."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy",
            request,
            ShareResponse,
        )

    async def shares(
        self,
        *,
        instrument_status: "InstrumentStatus" = 0,
        instrument_exchange: "InstrumentExchangeType" = 0,
    ) -> SharesResponse:
        """Получить список акций."""

        request = InstrumentsRequest()
        request.instrument_status = instrument_status
        request.instrument_exchange = instrument_exchange

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares",
            request,
            SharesResponse,
        )

    async def indicatives(self) -> IndicativesResponse:
        """Получить индикативные инструменты — индексы, товары и другие."""

        request = IndicativesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Indicatives",
            request,
            IndicativesResponse,
        )

    async def get_accrued_interests(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetAccruedInterestsResponse:
        """Получить накопленный купонный доход по облигации."""

        request = GetAccruedInterestsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
            request,
            GetAccruedInterestsResponse,
        )

    async def get_futures_margin(
        self, *, figi: str = "", instrument_id: str = ""
    ) -> GetFuturesMarginResponse:
        """Получить размера гарантийного обеспечения по фьючерсам."""

        request = GetFuturesMarginRequest()
        request.figi = figi
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
            request,
            GetFuturesMarginResponse,
        )

    async def get_instrument_by(
        self, *, id_type: "InstrumentIdType" = 0, class_code: str = "", id: str = ""
    ) -> InstrumentResponse:
        """Получить основную информацию об инструменте."""

        request = InstrumentRequest()
        request.id_type = id_type
        request.class_code = class_code
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
            request,
            InstrumentResponse,
        )

    async def get_dividends(
        self,
        *,
        figi: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
        instrument_id: str = "",
    ) -> GetDividendsResponse:
        """Получить события выплаты дивидендов по инструменту."""

        request = GetDividendsRequest()
        request.figi = figi
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends",
            request,
            GetDividendsResponse,
        )

    async def get_asset_by(self, *, id: str = "") -> AssetResponse:
        """Получить актив по его идентификатору."""

        request = AssetRequest()
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetBy",
            request,
            AssetResponse,
        )

    async def get_assets(
        self, *, instrument_type: "InstrumentType" = 0
    ) -> AssetsResponse:
        """
        Получить список активов. Метод работает для всех инструментов, кроме
        срочных — опционов и фьючерсов.
        """

        request = AssetsRequest()
        request.instrument_type = instrument_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssets",
            request,
            AssetsResponse,
        )

    async def get_favorites(self) -> GetFavoritesResponse:
        """Получить список избранных инструментов."""

        request = GetFavoritesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFavorites",
            request,
            GetFavoritesResponse,
        )

    async def edit_favorites(
        self,
        *,
        instruments: List["EditFavoritesRequestInstrument"] = [],
        action_type: "EditFavoritesActionType" = 0,
    ) -> EditFavoritesResponse:
        """Отредактировать список избранных инструментов."""

        request = EditFavoritesRequest()
        if instruments is not None:
            request.instruments = instruments
        request.action_type = action_type

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EditFavorites",
            request,
            EditFavoritesResponse,
        )

    async def get_countries(self) -> GetCountriesResponse:
        """Получить список стран."""

        request = GetCountriesRequest()

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetCountries",
            request,
            GetCountriesResponse,
        )

    async def find_instrument(
        self,
        *,
        query: str = "",
        instrument_kind: "InstrumentType" = 0,
        api_trade_available_flag: bool = False,
    ) -> FindInstrumentResponse:
        """Найти инструмент."""

        request = FindInstrumentRequest()
        request.query = query
        request.instrument_kind = instrument_kind
        request.api_trade_available_flag = api_trade_available_flag

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FindInstrument",
            request,
            FindInstrumentResponse,
        )

    async def get_brands(self, *, paging: Optional["Page"] = None) -> GetBrandsResponse:
        """Получить список брендов."""

        request = GetBrandsRequest()
        if paging is not None:
            request.paging = paging

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrands",
            request,
            GetBrandsResponse,
        )

    async def get_brand_by(self, *, id: str = "") -> Brand:
        """Получить бренд по его идентификатору."""

        request = GetBrandRequest()
        request.id = id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetBrandBy",
            request,
            Brand,
        )

    async def get_asset_fundamentals(
        self, *, assets: List[str] = []
    ) -> GetAssetFundamentalsResponse:
        """Получить фундаментальные показатели по активу."""

        request = GetAssetFundamentalsRequest()
        request.assets = assets

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetFundamentals",
            request,
            GetAssetFundamentalsResponse,
        )

    async def get_asset_reports(
        self,
        *,
        instrument_id: str = "",
        from_: Optional[datetime] = None,
        to: Optional[datetime] = None,
    ) -> GetAssetReportsResponse:
        """Получить расписания выхода отчётностей эмитентов."""

        request = GetAssetReportsRequest()
        request.instrument_id = instrument_id
        if from_ is not None:
            request.from_ = from_
        if to is not None:
            request.to = to

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAssetReports",
            request,
            GetAssetReportsResponse,
        )

    async def get_consensus_forecasts(
        self, *, paging: Optional["Page"] = None
    ) -> GetConsensusForecastsResponse:
        """Получить мнения аналитиков по инструменту."""

        request = GetConsensusForecastsRequest()
        if paging is not None:
            request.paging = paging

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetConsensusForecasts",
            request,
            GetConsensusForecastsResponse,
        )

    async def get_forecast_by(self, *, instrument_id: str = "") -> GetForecastResponse:
        """Получить прогнозов инвестдомов по инструменту."""

        request = GetForecastRequest()
        request.instrument_id = instrument_id

        return await self._unary_unary(
            "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetForecastBy",
            request,
            GetForecastResponse,
        )
